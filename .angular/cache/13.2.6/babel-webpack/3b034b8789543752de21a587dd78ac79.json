{"ast":null,"code":"import * as dagre from 'dagre';\nexport var Orientation = /*#__PURE__*/(() => {\n  (function (Orientation) {\n    Orientation[\"LEFT_TO_RIGHT\"] = \"LR\";\n    Orientation[\"RIGHT_TO_LEFT\"] = \"RL\";\n    Orientation[\"TOP_TO_BOTTOM\"] = \"TB\";\n    Orientation[\"BOTTOM_TO_TOM\"] = \"BT\";\n  })(Orientation || (Orientation = {}));\n\n  return Orientation;\n})();\nexport var Alignment = /*#__PURE__*/(() => {\n  (function (Alignment) {\n    Alignment[\"CENTER\"] = \"C\";\n    Alignment[\"UP_LEFT\"] = \"UL\";\n    Alignment[\"UP_RIGHT\"] = \"UR\";\n    Alignment[\"DOWN_LEFT\"] = \"DL\";\n    Alignment[\"DOWN_RIGHT\"] = \"DR\";\n  })(Alignment || (Alignment = {}));\n\n  return Alignment;\n})();\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\nexport class DagreNodesOnlyLayout {\n  constructor() {\n    this.defaultSettings = {\n      orientation: Orientation.LEFT_TO_RIGHT,\n      marginX: 20,\n      marginY: 20,\n      edgePadding: 100,\n      rankPadding: 100,\n      nodePadding: 50,\n      curveDistance: 20,\n      multigraph: false,\n      compound: true\n    };\n    this.settings = {};\n  }\n\n  run(graph) {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph, edge) {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width'; // determine new arrow position\n\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance; // generate new points\n\n    edge.points = [startingPoint, {\n      [rankAxis]: (startingPoint[rankAxis] + endingPoint[rankAxis]) / 2,\n      [orderAxis]: startingPoint[orderAxis]\n    }, {\n      [orderAxis]: endingPoint[orderAxis],\n      [rankAxis]: (startingPoint[rankAxis] + endingPoint[rankAxis]) / 2\n    }, endingPoint];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n\n    return graph;\n  }\n\n  createDagreGraph(graph) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph\n    });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    }); // Default to assigning a new object as a label for each new edge.\n\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n    this.dagreNodes = graph.nodes.map(n => {\n      const node = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n    this.dagreEdges = graph.edges.map(l => {\n      let linkId = 1;\n      const newLink = Object.assign({}, l);\n\n      if (!newLink.id) {\n        newLink.id = linkId;\n        linkId++;\n      }\n\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n\n      if (!node.height) {\n        node.height = 30;\n      } // update dagre\n\n\n      this.dagreGraph.setNode(node.id, node);\n    } // update dagre\n\n\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}