{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Injectable, HostListener, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChild, ViewChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport * as ease from 'd3-ease';\nimport 'd3-transition';\nimport { Subject, Subscription, Observable, of, fromEvent } from 'rxjs';\nimport { first, debounceTime } from 'rxjs/operators';\nimport { identity, transform, translate, scale, toSVG, smoothMatrix } from 'transformation-matrix';\nimport { scaleOrdinal } from 'd3-scale';\nimport * as dagre from 'dagre';\nimport * as d3Force from 'd3-force';\nimport { forceSimulation, forceManyBody, forceCollide, forceLink } from 'd3-force';\nimport { d3adaptor } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Timer from 'd3-timer';\nconst _c0 = [\"linkTemplate\"];\nconst _c1 = [\"nodeTemplate\"];\nconst _c2 = [\"clusterTemplate\"];\nconst _c3 = [\"defsTemplate\"];\nconst _c4 = [\"miniMapNodeTemplate\"];\nconst _c5 = [\"nodeElement\"];\nconst _c6 = [\"linkElement\"];\n\nfunction GraphComponent__svg_g_2__svg_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 14);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.defsTemplate);\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 15);\n  }\n\n  if (rf & 2) {\n    const link_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"d\", link_r7.textPath)(\"id\", link_r7.id);\n  }\n}\n\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction GraphComponent__svg_g_2__svg_g_7__svg_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 20);\n  }\n\n  if (rf & 2) {\n    const node_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r10.clusterTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, node_r8));\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_7__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 21);\n    i0.ɵɵelement(1, \"rect\");\n    i0.ɵɵelementStart(2, \"text\", 22);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const node_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"width\", node_r8.dimension.width)(\"height\", node_r8.dimension.height)(\"fill\", node_r8.data == null ? null : node_r8.data.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", 10)(\"y\", node_r8.dimension.height / 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r8.label, \" \");\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 16, 17);\n    i0.ɵɵlistener(\"click\", function GraphComponent__svg_g_2__svg_g_7_Template__svg_g_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const node_r8 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onClick(node_r8);\n    });\n    i0.ɵɵtemplate(2, GraphComponent__svg_g_2__svg_g_7__svg_ng_container_2_Template, 1, 4, \"ng-container\", 18);\n    i0.ɵɵtemplate(3, GraphComponent__svg_g_2__svg_g_7__svg_g_3_Template, 4, 6, \"g\", 19);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r8 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"old-node\", ctx_r4.animate && ctx_r4.oldClusters.has(node_r8.id));\n    i0.ɵɵproperty(\"id\", node_r8.id);\n    i0.ɵɵattribute(\"transform\", node_r8.transform);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clusterTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.clusterTemplate);\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_9__svg_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 20);\n  }\n\n  if (rf & 2) {\n    const link_r16 = i0.ɵɵnextContext().$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r18.linkTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, link_r16));\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_9__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 26);\n  }\n\n  if (rf & 2) {\n    const link_r16 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵattribute(\"d\", link_r16.line);\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 23, 24);\n    i0.ɵɵtemplate(2, GraphComponent__svg_g_2__svg_g_9__svg_ng_container_2_Template, 1, 4, \"ng-container\", 18);\n    i0.ɵɵtemplate(3, GraphComponent__svg_g_2__svg_g_9__svg_path_3_Template, 1, 1, \"path\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const link_r16 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"id\", link_r16.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.linkTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.linkTemplate);\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_11__svg_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 20);\n  }\n\n  if (rf & 2) {\n    const node_r22 = i0.ɵɵnextContext().$implicit;\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r24.nodeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, node_r22));\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_11__svg_circle_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 30);\n  }\n\n  if (rf & 2) {\n    const node_r22 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵattribute(\"cx\", node_r22.dimension.width / 2)(\"cy\", node_r22.dimension.height / 2)(\"fill\", node_r22.data == null ? null : node_r22.data.color);\n  }\n}\n\nfunction GraphComponent__svg_g_2__svg_g_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 27, 28);\n    i0.ɵɵlistener(\"click\", function GraphComponent__svg_g_2__svg_g_11_Template__svg_g_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r29);\n      const node_r22 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return ctx_r28.onClick(node_r22);\n    })(\"mousedown\", function GraphComponent__svg_g_2__svg_g_11_Template__svg_g_mousedown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r29);\n      const node_r22 = restoredCtx.$implicit;\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return ctx_r30.onNodeMouseDown($event, node_r22);\n    });\n    i0.ɵɵtemplate(2, GraphComponent__svg_g_2__svg_g_11__svg_ng_container_2_Template, 1, 4, \"ng-container\", 18);\n    i0.ɵɵtemplate(3, GraphComponent__svg_g_2__svg_g_11__svg_circle_3_Template, 1, 3, \"circle\", 29);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r22 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"old-node\", ctx_r6.animate && ctx_r6.oldNodes.has(node_r22.id));\n    i0.ɵɵproperty(\"id\", node_r22.id);\n    i0.ɵɵattribute(\"transform\", node_r22.transform);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.nodeTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.nodeTemplate);\n  }\n}\n\nfunction GraphComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"touchstart\", function GraphComponent__svg_g_2_Template__svg_g_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.onTouchStart($event);\n    })(\"touchend\", function GraphComponent__svg_g_2_Template__svg_g_touchend_0_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.onTouchEnd($event);\n    });\n    i0.ɵɵelementStart(1, \"defs\");\n    i0.ɵɵtemplate(2, GraphComponent__svg_g_2__svg_ng_container_2_Template, 1, 1, \"ng-container\", 5);\n    i0.ɵɵtemplate(3, GraphComponent__svg_g_2__svg_path_3_Template, 1, 2, \"path\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"rect\", 7);\n    i0.ɵɵlistener(\"mousedown\", function GraphComponent__svg_g_2_Template__svg_rect_mousedown_4_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.isPanning = true;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementStart(6, \"g\", 8);\n    i0.ɵɵtemplate(7, GraphComponent__svg_g_2__svg_g_7_Template, 4, 6, \"g\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"g\", 10);\n    i0.ɵɵtemplate(9, GraphComponent__svg_g_2__svg_g_9_Template, 4, 3, \"g\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"g\", 12);\n    i0.ɵɵtemplate(11, GraphComponent__svg_g_2__svg_g_11_Template, 4, 6, \"g\", 13);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transform);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.defsTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.graph.edges);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"width\", ctx_r0.dims.width * 100)(\"height\", ctx_r0.dims.height * 100)(\"transform\", \"translate(\" + (-ctx_r0.dims.width || 0) * 50 + \",\" + (-ctx_r0.dims.height || 0) * 50 + \")\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.graph.clusters)(\"ngForTrackBy\", ctx_r0.trackNodeBy);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.graph.edges)(\"ngForTrackBy\", ctx_r0.trackLinkBy);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.graph.nodes)(\"ngForTrackBy\", ctx_r0.trackNodeBy);\n  }\n}\n\nfunction GraphComponent__svg_g_5__svg_g_4__svg_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 20);\n  }\n\n  if (rf & 2) {\n    const node_r36 = i0.ɵɵnextContext().$implicit;\n    const ctx_r38 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r38.miniMapNodeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, node_r36));\n  }\n}\n\nfunction GraphComponent__svg_g_5__svg_g_4__svg_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0, 20);\n  }\n\n  if (rf & 2) {\n    const node_r36 = i0.ɵɵnextContext().$implicit;\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r39.nodeTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, node_r36));\n  }\n}\n\nfunction GraphComponent__svg_g_5__svg_g_4__svg_circle_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 30);\n  }\n\n  if (rf & 2) {\n    const node_r36 = i0.ɵɵnextContext().$implicit;\n    const ctx_r40 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"cx\", node_r36.dimension.width / 2 / ctx_r40.minimapScaleCoefficient)(\"cy\", node_r36.dimension.height / 2 / ctx_r40.minimapScaleCoefficient)(\"fill\", node_r36.data == null ? null : node_r36.data.color);\n  }\n}\n\nfunction GraphComponent__svg_g_5__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 36, 28);\n    i0.ɵɵtemplate(2, GraphComponent__svg_g_5__svg_g_4__svg_ng_container_2_Template, 1, 4, \"ng-container\", 18);\n    i0.ɵɵtemplate(3, GraphComponent__svg_g_5__svg_g_4__svg_ng_container_3_Template, 1, 4, \"ng-container\", 18);\n    i0.ɵɵtemplate(4, GraphComponent__svg_g_5__svg_g_4__svg_circle_4_Template, 1, 3, \"circle\", 29);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r36 = ctx.$implicit;\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"old-node\", ctx_r35.animate && ctx_r35.oldNodes.has(node_r36.id));\n    i0.ɵɵproperty(\"id\", node_r36.id);\n    i0.ɵɵattribute(\"transform\", node_r36.transform);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r35.miniMapNodeTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r35.miniMapNodeTemplate && ctx_r35.nodeTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r35.nodeTemplate && !ctx_r35.miniMapNodeTemplate);\n  }\n}\n\nfunction GraphComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 31)(1, \"rect\", 32);\n    i0.ɵɵlistener(\"mousedown\", function GraphComponent__svg_g_5_Template__svg_rect_mousedown_1_listener($event) {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return ctx_r44.onMinimapPanTo($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"g\")(3, \"g\", 33);\n    i0.ɵɵtemplate(4, GraphComponent__svg_g_5__svg_g_4_Template, 5, 7, \"g\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"rect\", 35);\n    i0.ɵɵlistener(\"mousedown\", function GraphComponent__svg_g_5_Template__svg_rect_mousedown_5_listener() {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r46 = i0.ɵɵnextContext();\n      return ctx_r46.onMinimapDragMouseDown();\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.minimapTransform)(\"clip-path\", \"url(#\" + ctx_r1.minimapClipPathId + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"width\", ctx_r1.graphDims.width / ctx_r1.minimapScaleCoefficient)(\"height\", ctx_r1.graphDims.height / ctx_r1.minimapScaleCoefficient);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", \"translate(\" + -ctx_r1.minimapOffsetX / ctx_r1.minimapScaleCoefficient + \"px,\" + -ctx_r1.minimapOffsetY / ctx_r1.minimapScaleCoefficient + \"px)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transform\", \"scale(\" + 1 / ctx_r1.minimapScaleCoefficient + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.graph.nodes)(\"ngForTrackBy\", ctx_r1.trackNodeBy);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"panning\", ctx_r1.isMinimapPanning);\n    i0.ɵɵattribute(\"transform\", \"translate(\" + ctx_r1.panOffsetX / ctx_r1.zoomLevel / -ctx_r1.minimapScaleCoefficient + \",\" + ctx_r1.panOffsetY / ctx_r1.zoomLevel / -ctx_r1.minimapScaleCoefficient + \")\")(\"width\", ctx_r1.width / ctx_r1.minimapScaleCoefficient / ctx_r1.zoomLevel)(\"height\", ctx_r1.height / ctx_r1.minimapScaleCoefficient / ctx_r1.zoomLevel);\n  }\n}\n\nconst _c8 = [\"*\"];\nconst cache = {};\n/**\n * Generates a short id.\n *\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar PanningAxis;\n\n(function (PanningAxis) {\n  PanningAxis[\"Both\"] = \"both\";\n  PanningAxis[\"Horizontal\"] = \"horizontal\";\n  PanningAxis[\"Vertical\"] = \"vertical\";\n})(PanningAxis || (PanningAxis = {}));\n\nvar MiniMapPosition;\n\n(function (MiniMapPosition) {\n  MiniMapPosition[\"UpperLeft\"] = \"UpperLeft\";\n  MiniMapPosition[\"UpperRight\"] = \"UpperRight\";\n})(MiniMapPosition || (MiniMapPosition = {}));\n/**\n * Throttle a function\n *\n * @export\n * @param {*}      func\n * @param {number} wait\n * @param {*}      [options]\n * @returns\n */\n\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n *\n * @export\n * @param {number} duration\n * @param {*} [options]\n * @returns\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nlet colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, this.domain);\n  }\n\n  generateColorScheme(scheme, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    return scaleOrdinal().range(scheme.domain).domain(domain);\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (typeof this.customColors === 'function') {\n      return this.customColors(value);\n    }\n\n    const formattedValue = value.toString();\n    let found; // todo type customColors\n\n    if (this.customColors && this.customColors.length > 0) {\n      found = this.customColors.find(mapping => {\n        return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n      });\n    }\n\n    if (found) {\n      return found.value;\n    } else {\n      return this.scale(value);\n    }\n  }\n\n}\n\nfunction calculateViewDimensions({\n  width,\n  height\n}) {\n  let chartWidth = width;\n  let chartHeight = height;\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight)\n  };\n}\n/**\n * Visibility Observer\n */\n\n\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      } // https://davidwalsh.name/offsetheight-visibility\n\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n\n}\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"LEFT_TO_RIGHT\"] = \"LR\";\n  Orientation[\"RIGHT_TO_LEFT\"] = \"RL\";\n  Orientation[\"TOP_TO_BOTTOM\"] = \"TB\";\n  Orientation[\"BOTTOM_TO_TOM\"] = \"BT\";\n})(Orientation || (Orientation = {}));\n\nvar Alignment;\n\n(function (Alignment) {\n  Alignment[\"CENTER\"] = \"C\";\n  Alignment[\"UP_LEFT\"] = \"UL\";\n  Alignment[\"UP_RIGHT\"] = \"UR\";\n  Alignment[\"DOWN_LEFT\"] = \"DL\";\n  Alignment[\"DOWN_RIGHT\"] = \"DR\";\n})(Alignment || (Alignment = {}));\n\nclass DagreLayout {\n  constructor() {\n    this.defaultSettings = {\n      orientation: Orientation.LEFT_TO_RIGHT,\n      marginX: 20,\n      marginY: 20,\n      edgePadding: 100,\n      rankPadding: 100,\n      nodePadding: 50,\n      multigraph: true,\n      compound: true\n    };\n    this.settings = {};\n  }\n\n  run(graph) {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph, edge) {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target); // determine new arrow position\n\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    }; // generate new points\n\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph\n    });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    }); // Default to assigning a new object as a label for each new edge.\n\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n    this.dagreNodes = graph.nodes.map(n => {\n      const node = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink = Object.assign({}, l);\n\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n\n      if (!node.height) {\n        node.height = 30;\n      } // update dagre\n\n\n      this.dagreGraph.setNode(node.id, node);\n    } // update dagre\n\n\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}\n\nclass DagreClusterLayout {\n  constructor() {\n    this.defaultSettings = {\n      orientation: Orientation.LEFT_TO_RIGHT,\n      marginX: 20,\n      marginY: 20,\n      edgePadding: 100,\n      rankPadding: 100,\n      nodePadding: 50,\n      multigraph: true,\n      compound: true\n    };\n    this.settings = {};\n  }\n\n  run(graph) {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    const dagreToOutput = node => {\n      const dagreNode = this.dagreGraph._nodes[node.id];\n      return Object.assign(Object.assign({}, node), {\n        position: {\n          x: dagreNode.x,\n          y: dagreNode.y\n        },\n        dimension: {\n          width: dagreNode.width,\n          height: dagreNode.height\n        }\n      });\n    };\n\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\n    graph.nodes = graph.nodes.map(dagreToOutput);\n    return graph;\n  }\n\n  updateEdge(graph, edge) {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target); // determine new arrow position\n\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    }; // generate new points\n\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph\n    });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    }); // Default to assigning a new object as a label for each new edge.\n\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n    this.dagreNodes = graph.nodes.map(n => {\n      const node = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n    this.dagreClusters = graph.clusters || [];\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink = Object.assign({}, l);\n\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    for (const cluster of this.dagreClusters) {\n      this.dagreGraph.setNode(cluster.id, cluster);\n      cluster.childNodeIds.forEach(childNodeId => {\n        this.dagreGraph.setParent(childNodeId, cluster.id);\n      });\n    } // update dagre\n\n\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nclass DagreNodesOnlyLayout {\n  constructor() {\n    this.defaultSettings = {\n      orientation: Orientation.LEFT_TO_RIGHT,\n      marginX: 20,\n      marginY: 20,\n      edgePadding: 100,\n      rankPadding: 100,\n      nodePadding: 50,\n      curveDistance: 20,\n      multigraph: true,\n      compound: true\n    };\n    this.settings = {};\n  }\n\n  run(graph) {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph, edge) {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width'; // determine new arrow position\n\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance; // generate new points\n\n    edge.points = [startingPoint, {\n      [orderAxis]: startingPoint[orderAxis],\n      [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n    }, {\n      [orderAxis]: endingPoint[orderAxis],\n      [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n    }, endingPoint];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n\n    return graph;\n  }\n\n  createDagreGraph(graph) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph\n    });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    }); // Default to assigning a new object as a label for each new edge.\n\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n    this.dagreNodes = graph.nodes.map(n => {\n      const node = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink = Object.assign({}, l);\n\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n\n      if (!node.height) {\n        node.height = 30;\n      } // update dagre\n\n\n      this.dagreGraph.setNode(node.id, node);\n    } // update dagre\n\n\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}\n\nfunction toD3Node(maybeNode) {\n  if (typeof maybeNode === 'string') {\n    return {\n      id: maybeNode,\n      x: 0,\n      y: 0\n    };\n  }\n\n  return maybeNode;\n}\n\nclass D3ForceDirectedLayout {\n  constructor() {\n    this.defaultSettings = {\n      force: forceSimulation().force('charge', forceManyBody().strength(-150)).force('collide', forceCollide(5)),\n      forceLink: forceLink().id(node => node.id).distance(() => 100)\n    };\n    this.settings = {};\n    this.outputGraph$ = new Subject();\n  }\n\n  run(graph) {\n    this.inputGraph = graph;\n    this.d3Graph = {\n      nodes: [...this.inputGraph.nodes.map(n => Object.assign({}, n))],\n      edges: [...this.inputGraph.edges.map(e => Object.assign({}, e))]\n    };\n    this.outputGraph = {\n      nodes: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n\n    if (this.settings.force) {\n      this.settings.force.nodes(this.d3Graph.nodes).force('link', this.settings.forceLink.links(this.d3Graph.edges)).alpha(0.5).restart().on('tick', () => {\n        this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n      });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph, edge) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n\n    if (settings.force) {\n      settings.force.nodes(this.d3Graph.nodes).force('link', settings.forceLink.links(this.d3Graph.edges)).alpha(0.5).restart().on('tick', () => {\n        this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n      });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  d3GraphToOutputGraph(d3Graph) {\n    this.outputGraph.nodes = this.d3Graph.nodes.map(node => Object.assign(Object.assign({}, node), {\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: node.dimension && node.dimension.width || 20,\n        height: node.dimension && node.dimension.height || 20\n      },\n      transform: `translate(${node.x - (node.dimension && node.dimension.width || 20) / 2 || 0}, ${node.y - (node.dimension && node.dimension.height || 20) / 2 || 0})`\n    }));\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => Object.assign(Object.assign({}, edge), {\n      source: toD3Node(edge.source).id,\n      target: toD3Node(edge.target).id,\n      points: [{\n        x: toD3Node(edge.source).x,\n        y: toD3Node(edge.source).y\n      }, {\n        x: toD3Node(edge.target).x,\n        y: toD3Node(edge.target).y\n      }]\n    }));\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode, $event) {\n    this.settings.force.alphaTarget(0.3).restart();\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n\n    if (!node) {\n      return;\n    }\n\n    this.draggingStart = {\n      x: $event.x - node.x,\n      y: $event.y - node.y\n    };\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDrag(draggingNode, $event) {\n    if (!draggingNode) {\n      return;\n    }\n\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n\n    if (!node) {\n      return;\n    }\n\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDragEnd(draggingNode, $event) {\n    if (!draggingNode) {\n      return;\n    }\n\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n\n    if (!node) {\n      return;\n    }\n\n    this.settings.force.alphaTarget(0);\n    node.fx = undefined;\n    node.fy = undefined;\n  }\n\n}\n\nfunction toNode(nodes, nodeRef) {\n  if (typeof nodeRef === 'number') {\n    return nodes[nodeRef];\n  }\n\n  return nodeRef;\n}\n\nclass ColaForceDirectedLayout {\n  constructor() {\n    this.defaultSettings = {\n      force: d3adaptor(Object.assign(Object.assign(Object.assign({}, d3Dispatch), d3Force), d3Timer)).linkDistance(150).avoidOverlaps(true),\n      viewDimensions: {\n        width: 600,\n        height: 600\n      }\n    };\n    this.settings = {};\n    this.outputGraph$ = new Subject();\n  }\n\n  run(graph) {\n    this.inputGraph = graph;\n\n    if (!this.inputGraph.clusters) {\n      this.inputGraph.clusters = [];\n    }\n\n    this.internalGraph = {\n      nodes: [...this.inputGraph.nodes.map(n => Object.assign(Object.assign({}, n), {\n        width: n.dimension ? n.dimension.width : 20,\n        height: n.dimension ? n.dimension.height : 20\n      }))],\n      groups: [...this.inputGraph.clusters.map(cluster => ({\n        padding: 5,\n        groups: cluster.childNodeIds.map(nodeId => this.inputGraph.clusters.findIndex(node => node.id === nodeId)).filter(x => x >= 0),\n        leaves: cluster.childNodeIds.map(nodeId => this.inputGraph.nodes.findIndex(node => node.id === nodeId)).filter(x => x >= 0)\n      }))],\n      links: [...this.inputGraph.edges.map(e => {\n        const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n        const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n\n        if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n          return undefined;\n        }\n\n        return Object.assign(Object.assign({}, e), {\n          source: sourceNodeIndex,\n          target: targetNodeIndex\n        });\n      }).filter(x => !!x)],\n      groupLinks: [...this.inputGraph.edges.map(e => {\n        const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n        const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n\n        if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n          return undefined;\n        }\n\n        return e;\n      }).filter(x => !!x)]\n    };\n    this.outputGraph = {\n      nodes: [],\n      clusters: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n\n    if (this.settings.force) {\n      this.settings.force = this.settings.force.nodes(this.internalGraph.nodes).groups(this.internalGraph.groups).links(this.internalGraph.links).alpha(0.5).on('tick', () => {\n        if (this.settings.onTickListener) {\n          this.settings.onTickListener(this.internalGraph);\n        }\n\n        this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n      });\n\n      if (this.settings.viewDimensions) {\n        this.settings.force = this.settings.force.size([this.settings.viewDimensions.width, this.settings.viewDimensions.height]);\n      }\n\n      if (this.settings.forceModifierFn) {\n        this.settings.force = this.settings.forceModifierFn(this.settings.force);\n      }\n\n      this.settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph, edge) {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n\n    if (settings.force) {\n      settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  internalGraphToOutputGraph(internalGraph) {\n    this.outputGraph.nodes = internalGraph.nodes.map(node => Object.assign(Object.assign({}, node), {\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: node.dimension && node.dimension.width || 20,\n        height: node.dimension && node.dimension.height || 20\n      },\n      transform: `translate(${node.x - (node.dimension && node.dimension.width || 20) / 2 || 0}, ${node.y - (node.dimension && node.dimension.height || 20) / 2 || 0})`\n    }));\n    this.outputGraph.edges = internalGraph.links.map(edge => {\n      const source = toNode(internalGraph.nodes, edge.source);\n      const target = toNode(internalGraph.nodes, edge.target);\n      return Object.assign(Object.assign({}, edge), {\n        source: source.id,\n        target: target.id,\n        points: [source.bounds.rayIntersection(target.bounds.cx(), target.bounds.cy()), target.bounds.rayIntersection(source.bounds.cx(), source.bounds.cy())]\n      });\n    }).concat(internalGraph.groupLinks.map(groupLink => {\n      const sourceNode = internalGraph.nodes.find(foundNode => foundNode.id === groupLink.source);\n      const targetNode = internalGraph.nodes.find(foundNode => foundNode.id === groupLink.target);\n      const source = sourceNode || internalGraph.groups.find(foundGroup => foundGroup.id === groupLink.source);\n      const target = targetNode || internalGraph.groups.find(foundGroup => foundGroup.id === groupLink.target);\n      return Object.assign(Object.assign({}, groupLink), {\n        source: source.id,\n        target: target.id,\n        points: [source.bounds.rayIntersection(target.bounds.cx(), target.bounds.cy()), target.bounds.rayIntersection(source.bounds.cx(), source.bounds.cy())]\n      });\n    }));\n    this.outputGraph.clusters = internalGraph.groups.map((group, index) => {\n      const inputGroup = this.inputGraph.clusters[index];\n      return Object.assign(Object.assign({}, inputGroup), {\n        dimension: {\n          width: group.bounds ? group.bounds.width() : 20,\n          height: group.bounds ? group.bounds.height() : 20\n        },\n        position: {\n          x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n          y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n        }\n      });\n    });\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode, $event) {\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n\n    if (!node) {\n      return;\n    }\n\n    this.draggingStart = {\n      x: node.x - $event.x,\n      y: node.y - $event.y\n    };\n    node.fixed = 1;\n    this.settings.force.start();\n  }\n\n  onDrag(draggingNode, $event) {\n    if (!draggingNode) {\n      return;\n    }\n\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n\n    if (!node) {\n      return;\n    }\n\n    node.x = this.draggingStart.x + $event.x;\n    node.y = this.draggingStart.y + $event.y;\n  }\n\n  onDragEnd(draggingNode, $event) {\n    if (!draggingNode) {\n      return;\n    }\n\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n\n    if (!node) {\n      return;\n    }\n\n    node.fixed = 0;\n  }\n\n}\n\nconst layouts = {\n  dagre: DagreLayout,\n  dagreCluster: DagreClusterLayout,\n  dagreNodesOnly: DagreNodesOnlyLayout,\n  d3ForceDirected: D3ForceDirectedLayout,\n  colaForceDirected: ColaForceDirectedLayout\n};\n\nclass LayoutService {\n  getLayout(name) {\n    if (layouts[name]) {\n      return new layouts[name]();\n    } else {\n      throw new Error(`Unknown layout type '${name}'`);\n    }\n  }\n\n}\n\nLayoutService.ɵfac = function LayoutService_Factory(t) {\n  return new (t || LayoutService)();\n};\n\nLayoutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LayoutService,\n  factory: LayoutService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutService, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n// tslint:disable-next-line: directive-selector\n\n\nclass MouseWheelDirective {\n  constructor() {\n    this.mouseWheelUp = new EventEmitter();\n    this.mouseWheelDown = new EventEmitter();\n  }\n\n  onMouseWheelChrome(event) {\n    this.mouseWheelFunc(event);\n  }\n\n  onMouseWheelFirefox(event) {\n    this.mouseWheelFunc(event);\n  }\n\n  onWheel(event) {\n    this.mouseWheelFunc(event);\n  }\n\n  onMouseWheelIE(event) {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event) {\n    if (window.event) {\n      event = window.event;\n    }\n\n    const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail || event.deltaY || event.deltaX)); // Firefox don't have native support for wheel event, as a result delta values are reverse\n\n    const isWheelMouseUp = event.wheelDelta ? delta > 0 : delta < 0;\n    const isWheelMouseDown = event.wheelDelta ? delta < 0 : delta > 0;\n\n    if (isWheelMouseUp) {\n      this.mouseWheelUp.emit(event);\n    } else if (isWheelMouseDown) {\n      this.mouseWheelDown.emit(event);\n    } // for IE\n\n\n    event.returnValue = false; // for Chrome and Firefox\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  }\n\n}\n\nMouseWheelDirective.ɵfac = function MouseWheelDirective_Factory(t) {\n  return new (t || MouseWheelDirective)();\n};\n\nMouseWheelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MouseWheelDirective,\n  selectors: [[\"\", \"mouseWheel\", \"\"]],\n  hostBindings: function MouseWheelDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousewheel\", function MouseWheelDirective_mousewheel_HostBindingHandler($event) {\n        return ctx.onMouseWheelChrome($event);\n      })(\"DOMMouseScroll\", function MouseWheelDirective_DOMMouseScroll_HostBindingHandler($event) {\n        return ctx.onMouseWheelFirefox($event);\n      })(\"wheel\", function MouseWheelDirective_wheel_HostBindingHandler($event) {\n        return ctx.onWheel($event);\n      })(\"onmousewheel\", function MouseWheelDirective_onmousewheel_HostBindingHandler($event) {\n        return ctx.onMouseWheelIE($event);\n      });\n    }\n  },\n  outputs: {\n    mouseWheelUp: \"mouseWheelUp\",\n    mouseWheelDown: \"mouseWheelDown\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MouseWheelDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mouseWheel]'\n    }]\n  }], null, {\n    mouseWheelUp: [{\n      type: Output\n    }],\n    mouseWheelDown: [{\n      type: Output\n    }],\n    onMouseWheelChrome: [{\n      type: HostListener,\n      args: ['mousewheel', ['$event']]\n    }],\n    onMouseWheelFirefox: [{\n      type: HostListener,\n      args: ['DOMMouseScroll', ['$event']]\n    }],\n    onWheel: [{\n      type: HostListener,\n      args: ['wheel', ['$event']]\n    }],\n    onMouseWheelIE: [{\n      type: HostListener,\n      args: ['onmousewheel', ['$event']]\n    }]\n  });\n})();\n\nclass GraphComponent {\n  constructor(el, zone, cd, layoutService) {\n    this.el = el;\n    this.zone = zone;\n    this.cd = cd;\n    this.layoutService = layoutService;\n    this.nodes = [];\n    this.clusters = [];\n    this.links = [];\n    this.activeEntries = [];\n    this.draggingEnabled = true;\n    this.panningEnabled = true;\n    this.panningAxis = PanningAxis.Both;\n    this.enableZoom = true;\n    this.zoomSpeed = 0.1;\n    this.minZoomLevel = 0.1;\n    this.maxZoomLevel = 4.0;\n    this.autoZoom = false;\n    this.panOnZoom = true;\n    this.animate = false;\n    this.autoCenter = false;\n    this.enableTrackpadSupport = false;\n    this.showMiniMap = false;\n    this.miniMapMaxWidth = 100;\n    this.miniMapPosition = MiniMapPosition.UpperRight;\n    this.scheme = 'cool';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.zoomChange = new EventEmitter();\n    this.clickHandler = new EventEmitter();\n    this.isMouseMoveCalled = false;\n    this.graphSubscription = new Subscription();\n    this.subscriptions = [];\n    this.isPanning = false;\n    this.isDragging = false;\n    this.initialized = false;\n    this.graphDims = {\n      width: 0,\n      height: 0\n    };\n    this._oldLinks = [];\n    this.oldNodes = new Set();\n    this.oldClusters = new Set();\n    this.transformationMatrix = identity();\n    this._touchLastX = null;\n    this._touchLastY = null;\n    this.minimapScaleCoefficient = 3;\n    this.minimapOffsetX = 0;\n    this.minimapOffsetY = 0;\n    this.isMinimapPanning = false;\n\n    this.groupResultsBy = node => node.label;\n  }\n  /**\n   * Get the current zoom level\n   */\n\n\n  get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n  /**\n   * Set the current zoom level\n   */\n\n\n  set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n  /**\n   * Get the current `x` position of the graph\n   */\n\n\n  get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n  /**\n   * Set the current `x` position of the graph\n   */\n\n\n  set panOffsetX(x) {\n    this.panTo(Number(x), null);\n  }\n  /**\n   * Get the current `y` position of the graph\n   */\n\n\n  get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n  /**\n   * Set the current `y` position of the graph\n   */\n\n\n  set panOffsetY(y) {\n    this.panTo(null, Number(y));\n  }\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  ngOnInit() {\n    if (this.update$) {\n      this.subscriptions.push(this.update$.subscribe(() => {\n        this.update();\n      }));\n    }\n\n    if (this.center$) {\n      this.subscriptions.push(this.center$.subscribe(() => {\n        this.center();\n      }));\n    }\n\n    if (this.zoomToFit$) {\n      this.subscriptions.push(this.zoomToFit$.subscribe(() => {\n        this.zoomToFit();\n      }));\n    }\n\n    if (this.panToNode$) {\n      this.subscriptions.push(this.panToNode$.subscribe(nodeId => {\n        this.panToNodeId(nodeId);\n      }));\n    }\n\n    this.minimapClipPathId = `minimapClip${id()}`;\n  }\n\n  ngOnChanges(changes) {\n    this.basicUpdate();\n    const {\n      layout,\n      layoutSettings,\n      nodes,\n      clusters,\n      links\n    } = changes;\n    this.setLayout(this.layout);\n\n    if (layoutSettings) {\n      this.setLayoutSettings(this.layoutSettings);\n    }\n\n    this.update();\n  }\n\n  setLayout(layout) {\n    this.initialized = false;\n\n    if (!layout) {\n      layout = 'dagre';\n    }\n\n    if (typeof layout === 'string') {\n      this.layout = this.layoutService.getLayout(layout);\n      this.setLayoutSettings(this.layoutSettings);\n    }\n  }\n\n  setLayoutSettings(settings) {\n    if (this.layout && typeof this.layout !== 'string') {\n      this.layout.settings = settings;\n    }\n  }\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  ngOnDestroy() {\n    this.unbindEvents();\n\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n\n    this.subscriptions = null;\n  }\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n    this.visibilityObserver = new VisibilityObserver(this.el, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    setTimeout(() => this.update());\n  }\n  /**\n   * Base class update implementation for the dag graph\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  update() {\n    this.basicUpdate();\n\n    if (!this.curve) {\n      this.curve = shape.curveBundle.beta(1);\n    }\n\n    this.zone.run(() => {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height\n      });\n      this.seriesDomain = this.getSeriesDomain();\n      this.setColors();\n      this.createGraph();\n      this.updateTransform();\n      this.initialized = true;\n    });\n  }\n  /**\n   * Creates the dagre graph engine\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  createGraph() {\n    this.graphSubscription.unsubscribe();\n    this.graphSubscription = new Subscription();\n\n    const initializeNode = n => {\n      if (!n.meta) {\n        n.meta = {};\n      }\n\n      if (!n.id) {\n        n.id = id();\n      }\n\n      if (!n.dimension) {\n        n.dimension = {\n          width: this.nodeWidth ? this.nodeWidth : 30,\n          height: this.nodeHeight ? this.nodeHeight : 30\n        };\n        n.meta.forceDimensions = false;\n      } else {\n        n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n      }\n\n      n.position = {\n        x: 0,\n        y: 0\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: this.nodes.length > 0 ? [...this.nodes].map(initializeNode) : [],\n      clusters: this.clusters && this.clusters.length > 0 ? [...this.clusters].map(initializeNode) : [],\n      edges: this.links.length > 0 ? [...this.links].map(e => {\n        if (!e.id) {\n          e.id = id();\n        }\n\n        return e;\n      }) : []\n    };\n    requestAnimationFrame(() => this.draw());\n  }\n  /**\n   * Draws the graph using dagre layouts\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  draw() {\n    if (!this.layout || typeof this.layout === 'string') {\n      return;\n    } // Calc view dims for the nodes\n\n\n    this.applyNodeDimensions(); // Recalc the layout\n\n    const result = this.layout.run(this.graph);\n    const result$ = result instanceof Observable ? result : of(result);\n    this.graphSubscription.add(result$.subscribe(graph => {\n      this.graph = graph;\n      this.tick();\n    }));\n\n    if (this.graph.nodes.length === 0) {\n      return;\n    }\n\n    result$.pipe(first()).subscribe(() => this.applyNodeDimensions());\n  }\n\n  tick() {\n    // Transposes view options to the node\n    const oldNodes = new Set();\n    this.graph.nodes.map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 || 0})`;\n\n      if (!n.data) {\n        n.data = {};\n      }\n\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldNodes.add(n.id);\n    });\n    const oldClusters = new Set();\n    (this.graph.clusters || []).map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 || 0})`;\n\n      if (!n.data) {\n        n.data = {};\n      }\n\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldClusters.add(n.id);\n    }); // Prevent animations on new nodes\n\n    setTimeout(() => {\n      this.oldNodes = oldNodes;\n      this.oldClusters = oldClusters;\n    }, 500); // Update the labels to the new positions\n\n    const newLinks = [];\n\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n      const isMultigraph = this.layout && typeof this.layout !== 'string' && this.layout.settings && this.layout.settings.multigraph;\n      let oldLink = isMultigraph ? this._oldLinks.find(ol => `${ol.source}${ol.target}${ol.id}` === normKey) : this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n      const linkFromGraph = isMultigraph ? this.graph.edges.find(nl => `${nl.source}${nl.target}${nl.id}` === normKey) : this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey);\n\n      if (!oldLink) {\n        oldLink = linkFromGraph || edgeLabel;\n      } else if (oldLink.data && linkFromGraph && linkFromGraph.data && JSON.stringify(oldLink.data) !== JSON.stringify(linkFromGraph.data)) {\n        // Compare old link to new link and replace if not equal\n        oldLink.data = linkFromGraph.data;\n      }\n\n      oldLink.oldLine = oldLink.line;\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n      const newLink = Object.assign({}, oldLink);\n      newLink.line = line;\n      newLink.points = points;\n      this.updateMidpointOnEdge(newLink, points);\n      const textPos = points[Math.floor(points.length / 2)];\n\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n      }\n\n      newLink.textAngle = 0;\n\n      if (!newLink.oldLine) {\n        newLink.oldLine = newLink.line;\n      }\n\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks; // Map the old links for animations\n\n    if (this.graph.edges) {\n      this._oldLinks = this.graph.edges.map(l => {\n        const newL = Object.assign({}, l);\n        newL.oldLine = l.line;\n        return newL;\n      });\n    }\n\n    this.updateMinimap();\n\n    if (this.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.autoCenter) {\n      // Auto-center when rendering\n      this.center();\n    }\n\n    requestAnimationFrame(() => this.redrawLines());\n    this.cd.markForCheck();\n  }\n\n  getMinimapTransform() {\n    switch (this.miniMapPosition) {\n      case MiniMapPosition.UpperLeft:\n        {\n          return '';\n        }\n\n      case MiniMapPosition.UpperRight:\n        {\n          return 'translate(' + (this.dims.width - this.graphDims.width / this.minimapScaleCoefficient) + ',' + 0 + ')';\n        }\n\n      default:\n        {\n          return '';\n        }\n    }\n  }\n\n  updateGraphDims() {\n    let minX = +Infinity;\n    let maxX = -Infinity;\n    let minY = +Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0; i < this.graph.nodes.length; i++) {\n      const node = this.graph.nodes[i];\n      minX = node.position.x < minX ? node.position.x : minX;\n      minY = node.position.y < minY ? node.position.y : minY;\n      maxX = node.position.x + node.dimension.width > maxX ? node.position.x + node.dimension.width : maxX;\n      maxY = node.position.y + node.dimension.height > maxY ? node.position.y + node.dimension.height : maxY;\n    }\n\n    minX -= 100;\n    minY -= 100;\n    maxX += 100;\n    maxY += 100;\n    this.graphDims.width = maxX - minX;\n    this.graphDims.height = maxY - minY;\n    this.minimapOffsetX = minX;\n    this.minimapOffsetY = minY;\n  }\n\n  updateMinimap() {\n    // Calculate the height/width total, but only if we have any nodes\n    if (this.graph.nodes && this.graph.nodes.length) {\n      this.updateGraphDims();\n\n      if (this.miniMapMaxWidth) {\n        this.minimapScaleCoefficient = this.graphDims.width / this.miniMapMaxWidth;\n      }\n\n      if (this.miniMapMaxHeight) {\n        this.minimapScaleCoefficient = Math.max(this.minimapScaleCoefficient, this.graphDims.height / this.miniMapMaxHeight);\n      }\n\n      this.minimapTransform = this.getMinimapTransform();\n    }\n  }\n  /**\n   * Measures the node element and applies the dimensions\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  applyNodeDimensions() {\n    if (this.nodeElements && this.nodeElements.length) {\n      this.nodeElements.map(elem => {\n        const nativeElement = elem.nativeElement;\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n\n        if (!node) {\n          return;\n        } // calculate the height\n\n\n        let dims;\n\n        try {\n          dims = nativeElement.getBBox();\n\n          if (!dims.width || !dims.height) {\n            return;\n          }\n        } catch (ex) {\n          // Skip drawing if element is not displayed - Firefox would throw an error here\n          return;\n        }\n\n        if (this.nodeHeight) {\n          node.dimension.height = node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n        } else {\n          node.dimension.height = node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n        }\n\n        if (this.nodeMaxHeight) {\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n        }\n\n        if (this.nodeMinHeight) {\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n        }\n\n        if (this.nodeWidth) {\n          node.dimension.width = node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n        } else {\n          // calculate the width\n          if (nativeElement.getElementsByTagName('text').length) {\n            let maxTextDims;\n\n            try {\n              for (const textElem of nativeElement.getElementsByTagName('text')) {\n                const currentBBox = textElem.getBBox();\n\n                if (!maxTextDims) {\n                  maxTextDims = currentBBox;\n                } else {\n                  if (currentBBox.width > maxTextDims.width) {\n                    maxTextDims.width = currentBBox.width;\n                  }\n\n                  if (currentBBox.height > maxTextDims.height) {\n                    maxTextDims.height = currentBBox.height;\n                  }\n                }\n              }\n            } catch (ex) {\n              // Skip drawing if element is not displayed - Firefox would throw an error here\n              return;\n            }\n\n            node.dimension.width = node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n          } else {\n            node.dimension.width = node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n          }\n        }\n\n        if (this.nodeMaxWidth) {\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n        }\n\n        if (this.nodeMinWidth) {\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n        }\n      });\n    }\n  }\n  /**\n   * Redraws the lines when dragged or viewport updated\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  redrawLines(_animate = this.animate) {\n    this.linkElements.map(linkEl => {\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n\n      if (edge) {\n        const linkSelection = select(linkEl.nativeElement).select('.line');\n        linkSelection.attr('d', edge.oldLine).transition().ease(ease.easeSinInOut).duration(_animate ? 500 : 0).attr('d', edge.line);\n        const textPathSelection = select(this.el.nativeElement).select(`#${edge.id}`);\n        textPathSelection.attr('d', edge.oldTextPath).transition().ease(ease.easeSinInOut).duration(_animate ? 500 : 0).attr('d', edge.textPath);\n        this.updateMidpointOnEdge(edge, edge.points);\n      }\n    });\n  }\n  /**\n   * Calculate the text directions / flipping\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  calcDominantBaseline(link) {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n    link.oldTextPath = link.textPath;\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = 'text-before-edge'; // reverse text path for when its flipped upside down\n\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = 'text-after-edge';\n      link.textPath = link.line;\n    }\n  }\n  /**\n   * Generate the new line path\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  generateLine(points) {\n    const lineFunction = shape.line().x(d => d.x).y(d => d.y).curve(this.curve);\n    return lineFunction(points);\n  }\n  /**\n   * Zoom was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onZoom($event, direction) {\n    if (this.enableTrackpadSupport && !$event.ctrlKey) {\n      this.pan($event.deltaX * -1, $event.deltaY * -1);\n      return;\n    }\n\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed); // Check that zooming wouldn't put us out of bounds\n\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n      return;\n    } // Check if zooming is enabled or not\n\n\n    if (!this.enableZoom) {\n      return;\n    }\n\n    if (this.panOnZoom === true && $event) {\n      // Absolute mouse X/Y on the screen\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY; // Transform the mouse X/Y into a SVG X/Y\n\n      const svg = this.el.nativeElement.querySelector('svg');\n      const svgGroup = svg.querySelector('g.chart');\n      const point = svg.createSVGPoint();\n      point.x = mouseX;\n      point.y = mouseY;\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse()); // Panzoom\n\n      this.pan(svgPoint.x, svgPoint.y, true);\n      this.zoom(zoomFactor);\n      this.pan(-svgPoint.x, -svgPoint.y, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n  /**\n   * Pan by x/y\n   *\n   * @param x\n   * @param y\n   */\n\n\n  pan(x, y, ignoreZoomLevel = false) {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n    this.updateTransform();\n  }\n  /**\n   * Pan to a fixed x/y\n   *\n   */\n\n\n  panTo(x, y) {\n    if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(panX / this.zoomLevel, panY / this.zoomLevel));\n    this.updateTransform();\n  }\n  /**\n   * Zoom by a factor\n   *\n   */\n\n\n  zoom(factor) {\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n  /**\n   * Zoom to a fixed level\n   *\n   */\n\n\n  zoomTo(level) {\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n    this.update();\n  }\n  /**\n   * Drag was invoked from an event\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onDrag(event) {\n    if (!this.draggingEnabled) {\n      return;\n    }\n\n    const node = this.draggingNode;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n      this.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel; // move the node\n\n    const x = node.position.x - node.dimension.width / 2;\n    const y = node.position.y - node.dimension.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (link.target === node.id || link.source === node.id || link.target.id === node.id || link.source.id === node.id) {\n        if (this.layout && typeof this.layout !== 'string') {\n          const result = this.layout.updateEdge(this.graph, link);\n          const result$ = result instanceof Observable ? result : of(result);\n          this.graphSubscription.add(result$.subscribe(graph => {\n            this.graph = graph;\n            this.redrawEdge(link);\n          }));\n        }\n      }\n    }\n\n    this.redrawLines(false);\n    this.updateMinimap();\n  }\n\n  redrawEdge(edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.oldLine = edge.line;\n    edge.line = line;\n  }\n  /**\n   * Update the entire view for the new pan position\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  updateTransform() {\n    this.transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n  }\n  /**\n   * Node was clicked\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onClick(event) {\n    this.select.emit(event);\n  }\n  /**\n   * Node was focused\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onActivate(event) {\n    if (this.activeEntries.indexOf(event) > -1) {\n      return;\n    }\n\n    this.activeEntries = [event, ...this.activeEntries];\n    this.activate.emit({\n      value: event,\n      entries: this.activeEntries\n    });\n  }\n  /**\n   * Node was defocused\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onDeactivate(event) {\n    const idx = this.activeEntries.indexOf(event);\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: event,\n      entries: this.activeEntries\n    });\n  }\n  /**\n   * Get the domain series for the nodes\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  getSeriesDomain() {\n    return this.nodes.map(d => this.groupResultsBy(d)).reduce((nodes, node) => nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node]), []).sort();\n  }\n  /**\n   * Tracking for the link\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  trackLinkBy(index, link) {\n    return link.id;\n  }\n  /**\n   * Tracking for the node\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  trackNodeBy(index, node) {\n    return node.id;\n  }\n  /**\n   * Sets the colors the nodes\n   *\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.seriesDomain, this.customColors);\n  }\n  /**\n   * On mouse move event, used for panning and dragging.\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onMouseMove($event) {\n    this.isMouseMoveCalled = true;\n\n    if ((this.isPanning || this.isMinimapPanning) && this.panningEnabled) {\n      this.panWithConstraints(this.panningAxis, $event);\n    } else if (this.isDragging && this.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  onMouseDown(event) {\n    this.isMouseMoveCalled = false;\n  }\n\n  graphClick(event) {\n    if (!this.isMouseMoveCalled) this.clickHandler.emit(event);\n  }\n  /**\n   * On touch start event to enable panning.\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onTouchStart(event) {\n    this._touchLastX = event.changedTouches[0].clientX;\n    this._touchLastY = event.changedTouches[0].clientY;\n    this.isPanning = true;\n  }\n  /**\n   * On touch move event, used for panning.\n   *\n   */\n\n\n  onTouchMove($event) {\n    if (this.isPanning && this.panningEnabled) {\n      const clientX = $event.changedTouches[0].clientX;\n      const clientY = $event.changedTouches[0].clientY;\n      const movementX = clientX - this._touchLastX;\n      const movementY = clientY - this._touchLastY;\n      this._touchLastX = clientX;\n      this._touchLastY = clientY;\n      this.pan(movementX, movementY);\n    }\n  }\n  /**\n   * On touch end event to disable panning.\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onTouchEnd(event) {\n    this.isPanning = false;\n  }\n  /**\n   * On mouse up event to disable panning/dragging.\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onMouseUp(event) {\n    this.isDragging = false;\n    this.isPanning = false;\n    this.isMinimapPanning = false;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n      this.layout.onDragEnd(this.draggingNode, event);\n    }\n  }\n  /**\n   * On node mouse down to kick off dragging\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onNodeMouseDown(event, node) {\n    if (!this.draggingEnabled) {\n      return;\n    }\n\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n      this.layout.onDragStart(node, event);\n    }\n  }\n  /**\n   * On minimap drag mouse down to kick off minimap panning\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onMinimapDragMouseDown() {\n    this.isMinimapPanning = true;\n  }\n  /**\n   * On minimap pan event. Pans the graph to the clicked position\n   *\n   * @memberOf GraphComponent\n   */\n\n\n  onMinimapPanTo(event) {\n    const x = event.offsetX - (this.dims.width - (this.graphDims.width + this.minimapOffsetX) / this.minimapScaleCoefficient);\n    const y = event.offsetY + this.minimapOffsetY / this.minimapScaleCoefficient;\n    this.panTo(x * this.minimapScaleCoefficient, y * this.minimapScaleCoefficient);\n    this.isMinimapPanning = true;\n  }\n  /**\n   * Center the graph in the viewport\n   */\n\n\n  center() {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n  /**\n   * Zooms to fit the entier graph\n   */\n\n\n  zoomToFit() {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    let zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (zoomLevel < this.minZoomLevel) {\n      zoomLevel = this.minZoomLevel;\n    }\n\n    if (zoomLevel > this.maxZoomLevel) {\n      zoomLevel = this.maxZoomLevel;\n    }\n\n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.zoomChange.emit(this.zoomLevel);\n    }\n  }\n  /**\n   * Pans to the node\n   * @param nodeId\n   */\n\n\n  panToNodeId(nodeId) {\n    const node = this.graph.nodes.find(n => n.id === nodeId);\n\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n\n  panWithConstraints(key, event) {\n    let x = event.movementX;\n    let y = event.movementY;\n\n    if (this.isMinimapPanning) {\n      x = -this.minimapScaleCoefficient * x * this.zoomLevel;\n      y = -this.minimapScaleCoefficient * y * this.zoomLevel;\n    }\n\n    switch (key) {\n      case PanningAxis.Horizontal:\n        this.pan(x, 0);\n        break;\n\n      case PanningAxis.Vertical:\n        this.pan(0, y);\n        break;\n\n      default:\n        this.pan(x, y);\n        break;\n    }\n  }\n\n  updateMidpointOnEdge(edge, points) {\n    if (!edge || !points) {\n      return;\n    }\n\n    if (points.length % 2 === 1) {\n      edge.midPoint = points[Math.floor(points.length / 2)];\n    } else {\n      const _first = points[points.length / 2];\n      const _second = points[points.length / 2 - 1];\n      edge.midPoint = {\n        x: (_first.x + _second.x) / 2,\n        y: (_first.y + _second.y) / 2\n      };\n    }\n  }\n\n  basicUpdate() {\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    } // default values if width or height are 0 or undefined\n\n\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.el.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n\n    return null;\n  }\n\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  bindWindowResizeEvent() {\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n}\n\nGraphComponent.ɵfac = function GraphComponent_Factory(t) {\n  return new (t || GraphComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(LayoutService));\n};\n\nGraphComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GraphComponent,\n  selectors: [[\"ngx-graph\"]],\n  contentQueries: function GraphComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c0, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c1, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c2, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c3, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clusterTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.defsTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.miniMapNodeTemplate = _t.first);\n    }\n  },\n  viewQuery: function GraphComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c5, 5);\n      i0.ɵɵviewQuery(_c6, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeElements = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkElements = _t);\n    }\n  },\n  hostBindings: function GraphComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousemove\", function GraphComponent_mousemove_HostBindingHandler($event) {\n        return ctx.onMouseMove($event);\n      }, false, i0.ɵɵresolveDocument)(\"mousedown\", function GraphComponent_mousedown_HostBindingHandler($event) {\n        return ctx.onMouseDown($event);\n      }, false, i0.ɵɵresolveDocument)(\"click\", function GraphComponent_click_HostBindingHandler($event) {\n        return ctx.graphClick($event);\n      }, false, i0.ɵɵresolveDocument)(\"touchmove\", function GraphComponent_touchmove_HostBindingHandler($event) {\n        return ctx.onTouchMove($event);\n      }, false, i0.ɵɵresolveDocument)(\"mouseup\", function GraphComponent_mouseup_HostBindingHandler($event) {\n        return ctx.onMouseUp($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    nodes: \"nodes\",\n    clusters: \"clusters\",\n    links: \"links\",\n    activeEntries: \"activeEntries\",\n    curve: \"curve\",\n    draggingEnabled: \"draggingEnabled\",\n    nodeHeight: \"nodeHeight\",\n    nodeMaxHeight: \"nodeMaxHeight\",\n    nodeMinHeight: \"nodeMinHeight\",\n    nodeWidth: \"nodeWidth\",\n    nodeMinWidth: \"nodeMinWidth\",\n    nodeMaxWidth: \"nodeMaxWidth\",\n    panningEnabled: \"panningEnabled\",\n    panningAxis: \"panningAxis\",\n    enableZoom: \"enableZoom\",\n    zoomSpeed: \"zoomSpeed\",\n    minZoomLevel: \"minZoomLevel\",\n    maxZoomLevel: \"maxZoomLevel\",\n    autoZoom: \"autoZoom\",\n    panOnZoom: \"panOnZoom\",\n    animate: \"animate\",\n    autoCenter: \"autoCenter\",\n    update$: \"update$\",\n    center$: \"center$\",\n    zoomToFit$: \"zoomToFit$\",\n    panToNode$: \"panToNode$\",\n    layout: \"layout\",\n    layoutSettings: \"layoutSettings\",\n    enableTrackpadSupport: \"enableTrackpadSupport\",\n    showMiniMap: \"showMiniMap\",\n    miniMapMaxWidth: \"miniMapMaxWidth\",\n    miniMapMaxHeight: \"miniMapMaxHeight\",\n    miniMapPosition: \"miniMapPosition\",\n    view: \"view\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    animations: \"animations\",\n    groupResultsBy: \"groupResultsBy\",\n    zoomLevel: \"zoomLevel\",\n    panOffsetX: \"panOffsetX\",\n    panOffsetY: \"panOffsetY\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    zoomChange: \"zoomChange\",\n    clickHandler: \"clickHandler\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c8,\n  decls: 6,\n  vars: 11,\n  consts: [[\"mouseWheel\", \"\", 1, \"ngx-charts-outer\", 3, \"mouseWheelUp\", \"mouseWheelDown\"], [1, \"ngx-charts\"], [\"class\", \"graph chart\", 3, \"touchstart\", \"touchend\", 4, \"ngIf\"], [\"class\", \"minimap\", 4, \"ngIf\"], [1, \"graph\", \"chart\", 3, \"touchstart\", \"touchend\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"class\", \"text-path\", 4, \"ngFor\", \"ngForOf\"], [1, \"panning-rect\", 3, \"mousedown\"], [1, \"clusters\"], [\"class\", \"node-group\", 3, \"old-node\", \"id\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"links\"], [\"class\", \"link-group\", 3, \"id\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"nodes\"], [\"class\", \"node-group\", 3, \"old-node\", \"id\", \"click\", \"mousedown\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngTemplateOutlet\"], [1, \"text-path\"], [1, \"node-group\", 3, \"id\", \"click\"], [\"clusterElement\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [\"class\", \"node cluster\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"node\", \"cluster\"], [\"alignment-baseline\", \"central\"], [1, \"link-group\", 3, \"id\"], [\"linkElement\", \"\"], [\"class\", \"edge\", 4, \"ngIf\"], [1, \"edge\"], [1, \"node-group\", 3, \"id\", \"click\", \"mousedown\"], [\"nodeElement\", \"\"], [\"r\", \"10\", 4, \"ngIf\"], [\"r\", \"10\"], [1, \"minimap\"], [1, \"minimap-background\", 3, \"mousedown\"], [1, \"minimap-nodes\"], [\"class\", \"node-group\", 3, \"old-node\", \"id\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"minimap-drag\", 3, \"mousedown\"], [1, \"node-group\", 3, \"id\"]],\n  template: function GraphComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"mouseWheelUp\", function GraphComponent_Template_div_mouseWheelUp_0_listener($event) {\n        return ctx.onZoom($event, \"in\");\n      })(\"mouseWheelDown\", function GraphComponent_Template_div_mouseWheelDown_0_listener($event) {\n        return ctx.onZoom($event, \"out\");\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵtemplate(2, GraphComponent__svg_g_2_Template, 12, 12, \"g\", 2);\n      i0.ɵɵelementStart(3, \"clipPath\");\n      i0.ɵɵelement(4, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, GraphComponent__svg_g_5_Template, 6, 15, \"g\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.width)(\"height\", ctx.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.initialized && ctx.graph);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.minimapClipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.graphDims.width / ctx.minimapScaleCoefficient)(\"height\", ctx.graphDims.height / ctx.minimapScaleCoefficient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showMiniMap);\n    }\n  },\n  directives: [MouseWheelDirective, i3.NgIf, i3.NgTemplateOutlet, i3.NgForOf],\n  styles: [\".minimap .minimap-background{fill:#0000001a}.minimap .minimap-drag{fill:#0003;stroke:#fff;stroke-width:1px;stroke-dasharray:2px;stroke-dashoffset:2px;cursor:pointer}.minimap .minimap-drag.panning{fill:#0000004d}.minimap .minimap-nodes{opacity:.5;pointer-events:none}.graph{-webkit-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:#0000;cursor:move}.graph .node-group.old-node{transition:transform .5s ease-in-out}.graph .node-group .node:focus{outline:none}.graph .cluster rect{opacity:.2}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate('500ms 100ms', style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n__decorate([throttleable(500)], GraphComponent.prototype, \"updateMinimap\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GraphComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-graph',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate('500ms 100ms', style({\n        opacity: 1\n      }))])])],\n      template: \"<div\\n  class=\\\"ngx-charts-outer\\\"\\n  [style.width.px]=\\\"width\\\"\\n  [@animationState]=\\\"'active'\\\"\\n  [@.disabled]=\\\"!animations\\\"\\n  (mouseWheelUp)=\\\"onZoom($event, 'in')\\\"\\n  (mouseWheelDown)=\\\"onZoom($event, 'out')\\\"\\n  mouseWheel\\n>\\n  <svg:svg class=\\\"ngx-charts\\\" [attr.width]=\\\"width\\\" [attr.height]=\\\"height\\\">\\n    <svg:g\\n      *ngIf=\\\"initialized && graph\\\"\\n      [attr.transform]=\\\"transform\\\"\\n      (touchstart)=\\\"onTouchStart($event)\\\"\\n      (touchend)=\\\"onTouchEnd($event)\\\"\\n      class=\\\"graph chart\\\"\\n    >\\n      <defs>\\n        <ng-container *ngIf=\\\"defsTemplate\\\" [ngTemplateOutlet]=\\\"defsTemplate\\\"></ng-container>\\n        <svg:path\\n          class=\\\"text-path\\\"\\n          *ngFor=\\\"let link of graph.edges\\\"\\n          [attr.d]=\\\"link.textPath\\\"\\n          [attr.id]=\\\"link.id\\\"\\n        ></svg:path>\\n      </defs>\\n\\n      <svg:rect\\n        class=\\\"panning-rect\\\"\\n        [attr.width]=\\\"dims.width * 100\\\"\\n        [attr.height]=\\\"dims.height * 100\\\"\\n        [attr.transform]=\\\"'translate(' + (-dims.width || 0) * 50 + ',' + (-dims.height || 0) * 50 + ')'\\\"\\n        (mousedown)=\\\"isPanning = true\\\"\\n      />\\n\\n      <ng-content></ng-content>\\n\\n      <svg:g class=\\\"clusters\\\">\\n        <svg:g\\n          #clusterElement\\n          *ngFor=\\\"let node of graph.clusters; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldClusters.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"clusterTemplate\\\"\\n            [ngTemplateOutlet]=\\\"clusterTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:g *ngIf=\\\"!clusterTemplate\\\" class=\\\"node cluster\\\">\\n            <svg:rect\\n              [attr.width]=\\\"node.dimension.width\\\"\\n              [attr.height]=\\\"node.dimension.height\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n            <svg:text alignment-baseline=\\\"central\\\" [attr.x]=\\\"10\\\" [attr.y]=\\\"node.dimension.height / 2\\\">\\n              {{ node.label }}\\n            </svg:text>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"links\\\">\\n        <svg:g #linkElement *ngFor=\\\"let link of graph.edges; trackBy: trackLinkBy\\\" class=\\\"link-group\\\" [id]=\\\"link.id\\\">\\n          <ng-container\\n            *ngIf=\\\"linkTemplate\\\"\\n            [ngTemplateOutlet]=\\\"linkTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: link }\\\"\\n          ></ng-container>\\n          <svg:path *ngIf=\\\"!linkTemplate\\\" class=\\\"edge\\\" [attr.d]=\\\"link.line\\\" />\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"nodes\\\">\\n        <svg:g\\n          #nodeElement\\n          *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n          (mousedown)=\\\"onNodeMouseDown($event, node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"nodeTemplate\\\"\\n            [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:circle\\n            *ngIf=\\\"!nodeTemplate\\\"\\n            r=\\\"10\\\"\\n            [attr.cx]=\\\"node.dimension.width / 2\\\"\\n            [attr.cy]=\\\"node.dimension.height / 2\\\"\\n            [attr.fill]=\\\"node.data?.color\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:clipPath [attr.id]=\\\"minimapClipPathId\\\">\\n      <svg:rect\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n      ></svg:rect>\\n    </svg:clipPath>\\n\\n    <svg:g\\n      class=\\\"minimap\\\"\\n      *ngIf=\\\"showMiniMap\\\"\\n      [attr.transform]=\\\"minimapTransform\\\"\\n      [attr.clip-path]=\\\"'url(#' + minimapClipPathId + ')'\\\"\\n    >\\n      <svg:rect\\n        class=\\\"minimap-background\\\"\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n        (mousedown)=\\\"onMinimapPanTo($event)\\\"\\n      ></svg:rect>\\n\\n      <svg:g\\n        [style.transform]=\\\"\\n          'translate(' +\\n          -minimapOffsetX / minimapScaleCoefficient +\\n          'px,' +\\n          -minimapOffsetY / minimapScaleCoefficient +\\n          'px)'\\n        \\\"\\n      >\\n        <svg:g class=\\\"minimap-nodes\\\" [style.transform]=\\\"'scale(' + 1 / minimapScaleCoefficient + ')'\\\">\\n          <svg:g\\n            #nodeElement\\n            *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n            class=\\\"node-group\\\"\\n            [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n            [id]=\\\"node.id\\\"\\n            [attr.transform]=\\\"node.transform\\\"\\n          >\\n            <ng-container\\n              *ngIf=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <ng-container\\n              *ngIf=\\\"!miniMapNodeTemplate && nodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <svg:circle\\n              *ngIf=\\\"!nodeTemplate && !miniMapNodeTemplate\\\"\\n              r=\\\"10\\\"\\n              [attr.cx]=\\\"node.dimension.width / 2 / minimapScaleCoefficient\\\"\\n              [attr.cy]=\\\"node.dimension.height / 2 / minimapScaleCoefficient\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n\\n        <svg:rect\\n          [attr.transform]=\\\"\\n            'translate(' +\\n            panOffsetX / zoomLevel / -minimapScaleCoefficient +\\n            ',' +\\n            panOffsetY / zoomLevel / -minimapScaleCoefficient +\\n            ')'\\n          \\\"\\n          class=\\\"minimap-drag\\\"\\n          [class.panning]=\\\"isMinimapPanning\\\"\\n          [attr.width]=\\\"width / minimapScaleCoefficient / zoomLevel\\\"\\n          [attr.height]=\\\"height / minimapScaleCoefficient / zoomLevel\\\"\\n          (mousedown)=\\\"onMinimapDragMouseDown()\\\"\\n        ></svg:rect>\\n      </svg:g>\\n    </svg:g>\\n  </svg:svg>\\n</div>\\n\",\n      styles: [\".minimap .minimap-background{fill:#0000001a}.minimap .minimap-drag{fill:#0003;stroke:#fff;stroke-width:1px;stroke-dasharray:2px;stroke-dashoffset:2px;cursor:pointer}.minimap .minimap-drag.panning{fill:#0000004d}.minimap .minimap-nodes{opacity:.5;pointer-events:none}.graph{-webkit-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:#0000;cursor:move}.graph .node-group.old-node{transition:transform .5s ease-in-out}.graph .node-group .node:focus{outline:none}.graph .cluster rect{opacity:.2}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: LayoutService\n    }];\n  }, {\n    nodes: [{\n      type: Input\n    }],\n    clusters: [{\n      type: Input\n    }],\n    links: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    draggingEnabled: [{\n      type: Input\n    }],\n    nodeHeight: [{\n      type: Input\n    }],\n    nodeMaxHeight: [{\n      type: Input\n    }],\n    nodeMinHeight: [{\n      type: Input\n    }],\n    nodeWidth: [{\n      type: Input\n    }],\n    nodeMinWidth: [{\n      type: Input\n    }],\n    nodeMaxWidth: [{\n      type: Input\n    }],\n    panningEnabled: [{\n      type: Input\n    }],\n    panningAxis: [{\n      type: Input\n    }],\n    enableZoom: [{\n      type: Input\n    }],\n    zoomSpeed: [{\n      type: Input\n    }],\n    minZoomLevel: [{\n      type: Input\n    }],\n    maxZoomLevel: [{\n      type: Input\n    }],\n    autoZoom: [{\n      type: Input\n    }],\n    panOnZoom: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    autoCenter: [{\n      type: Input\n    }],\n    update$: [{\n      type: Input\n    }],\n    center$: [{\n      type: Input\n    }],\n    zoomToFit$: [{\n      type: Input\n    }],\n    panToNode$: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    layoutSettings: [{\n      type: Input\n    }],\n    enableTrackpadSupport: [{\n      type: Input\n    }],\n    showMiniMap: [{\n      type: Input\n    }],\n    miniMapMaxWidth: [{\n      type: Input\n    }],\n    miniMapMaxHeight: [{\n      type: Input\n    }],\n    miniMapPosition: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    zoomChange: [{\n      type: Output\n    }],\n    clickHandler: [{\n      type: Output\n    }],\n    linkTemplate: [{\n      type: ContentChild,\n      args: ['linkTemplate']\n    }],\n    nodeTemplate: [{\n      type: ContentChild,\n      args: ['nodeTemplate']\n    }],\n    clusterTemplate: [{\n      type: ContentChild,\n      args: ['clusterTemplate']\n    }],\n    defsTemplate: [{\n      type: ContentChild,\n      args: ['defsTemplate']\n    }],\n    miniMapNodeTemplate: [{\n      type: ContentChild,\n      args: ['miniMapNodeTemplate']\n    }],\n    nodeElements: [{\n      type: ViewChildren,\n      args: ['nodeElement']\n    }],\n    linkElements: [{\n      type: ViewChildren,\n      args: ['linkElement']\n    }],\n    groupResultsBy: [{\n      type: Input\n    }],\n    zoomLevel: [{\n      type: Input,\n      args: ['zoomLevel']\n    }],\n    panOffsetX: [{\n      type: Input,\n      args: ['panOffsetX']\n    }],\n    panOffsetY: [{\n      type: Input,\n      args: ['panOffsetY']\n    }],\n    updateMinimap: [],\n    onMouseMove: [{\n      type: HostListener,\n      args: ['document:mousemove', ['$event']]\n    }],\n    onMouseDown: [{\n      type: HostListener,\n      args: ['document:mousedown', ['$event']]\n    }],\n    graphClick: [{\n      type: HostListener,\n      args: ['document:click', ['$event']]\n    }],\n    onTouchMove: [{\n      type: HostListener,\n      args: ['document:touchmove', ['$event']]\n    }],\n    onMouseUp: [{\n      type: HostListener,\n      args: ['document:mouseup', ['$event']]\n    }]\n  });\n})();\n\nclass GraphModule {}\n\nGraphModule.ɵfac = function GraphModule_Factory(t) {\n  return new (t || GraphModule)();\n};\n\nGraphModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GraphModule\n});\nGraphModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [LayoutService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GraphModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [GraphComponent, MouseWheelDirective, VisibilityObserver],\n      exports: [GraphComponent, MouseWheelDirective],\n      providers: [LayoutService]\n    }]\n  }], null, null);\n})();\n\nclass NgxGraphModule {}\n\nNgxGraphModule.ɵfac = function NgxGraphModule_Factory(t) {\n  return new (t || NgxGraphModule)();\n};\n\nNgxGraphModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxGraphModule\n});\nNgxGraphModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule], GraphModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxGraphModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [GraphModule]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-graph\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Alignment, ColaForceDirectedLayout, D3ForceDirectedLayout, DagreClusterLayout, DagreLayout, DagreNodesOnlyLayout, GraphComponent, GraphModule, MiniMapPosition, MouseWheelDirective, NgxGraphModule, Orientation, PanningAxis, toD3Node, toNode };","map":{"version":3,"names":["i0","EventEmitter","Directive","Output","Injectable","HostListener","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ContentChild","ViewChildren","NgModule","i3","CommonModule","__decorate","trigger","transition","style","animate","select","shape","ease","Subject","Subscription","Observable","of","fromEvent","first","debounceTime","identity","transform","translate","scale","toSVG","smoothMatrix","scaleOrdinal","dagre","d3Force","forceSimulation","forceManyBody","forceCollide","forceLink","d3adaptor","d3Dispatch","d3Timer","cache","id","newId","Math","random","pow","toString","slice","PanningAxis","MiniMapPosition","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","colorSets","name","selectable","group","domain","ColorHelper","constructor","scheme","customColors","find","cs","colorDomain","generateColorScheme","range","getColor","undefined","Error","formattedValue","found","length","mapping","toLowerCase","calculateViewDimensions","width","height","chartWidth","chartHeight","max","floor","VisibilityObserver","element","zone","visible","isVisible","runCheck","destroy","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","nativeElement","runOutsideAngular","ɵfac","ElementRef","NgZone","ɵdir","type","selector","Orientation","Alignment","DagreLayout","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","graph","createDagreGraph","layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","_nodes","dagreNode","node","nodes","n","position","x","y","dimension","updateEdge","edge","sourceNode","source","targetNode","dir","startingPoint","endingPoint","points","assign","graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","setNode","setEdge","DagreClusterLayout","dagreToOutput","clusters","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","DagreNodesOnlyLayout","curveDistance","rankAxis","orderAxis","rankDimension","edgeLabelId","matchingEdgeLabel","toD3Node","maybeNode","D3ForceDirectedLayout","force","strength","distance","outputGraph$","inputGraph","d3Graph","e","outputGraph","next","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","toNode","nodeRef","ColaForceDirectedLayout","linkDistance","avoidOverlaps","viewDimensions","internalGraph","groups","padding","nodeId","findIndex","filter","leaves","sourceNodeIndex","targetNodeIndex","groupLinks","onTickListener","internalGraphToOutputGraph","size","forceModifierFn","start","bounds","rayIntersection","cx","cy","concat","groupLink","foundNode","foundGroup","index","inputGroup","nodeIndex","fixed","layouts","dagreCluster","dagreNodesOnly","d3ForceDirected","colaForceDirected","LayoutService","getLayout","ɵprov","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","event","mouseWheelFunc","onMouseWheelFirefox","onWheel","onMouseWheelIE","window","delta","min","wheelDelta","detail","deltaY","deltaX","isWheelMouseUp","isWheelMouseDown","returnValue","preventDefault","GraphComponent","el","cd","layoutService","activeEntries","draggingEnabled","panningEnabled","panningAxis","Both","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","autoCenter","enableTrackpadSupport","showMiniMap","miniMapMaxWidth","miniMapPosition","UpperRight","animations","activate","deactivate","zoomChange","clickHandler","isMouseMoveCalled","graphSubscription","subscriptions","isPanning","isDragging","initialized","graphDims","_oldLinks","oldNodes","Set","oldClusters","transformationMatrix","_touchLastX","_touchLastY","minimapScaleCoefficient","minimapOffsetX","minimapOffsetY","isMinimapPanning","groupResultsBy","label","zoomLevel","a","level","zoomTo","Number","panOffsetX","panTo","panOffsetY","f","ngOnInit","update$","push","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","panToNodeId","minimapClipPathId","ngOnChanges","changes","basicUpdate","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unbindEvents","visibilityObserver","unsubscribe","sub","ngAfterViewInit","bindWindowResizeEvent","bind","curve","curveBundle","beta","dims","seriesDomain","getSeriesDomain","setColors","createGraph","updateTransform","initializeNode","meta","nodeWidth","nodeHeight","forceDimensions","data","requestAnimationFrame","draw","applyNodeDimensions","result$","add","tick","pipe","color","colors","newLinks","edgeLabel","normKey","replace","isMultigraph","oldLink","ol","linkFromGraph","nl","JSON","stringify","oldLine","line","generateLine","updateMidpointOnEdge","textPos","textTransform","textAngle","calcDominantBaseline","newL","updateMinimap","redrawLines","markForCheck","getMinimapTransform","UpperLeft","updateGraphDims","minX","Infinity","maxX","minY","maxY","i","miniMapMaxHeight","minimapTransform","nodeElements","elem","getBBox","ex","nodeMaxHeight","nodeMinHeight","getElementsByTagName","maxTextDims","textElem","currentBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","linkSelection","attr","easeSinInOut","textPathSelection","oldTextPath","textPath","link","firstPoint","lastPoint","dominantBaseline","reverse","lineFunction","d","onZoom","direction","ctrlKey","pan","zoomFactor","newZoomLevel","mouseX","clientX","mouseY","clientY","svg","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","zoom","ignoreZoomLevel","isNaN","panX","panY","factor","movementX","movementY","redrawEdge","onClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","trackNodeBy","onMouseMove","panWithConstraints","onMouseDown","graphClick","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","onMinimapDragMouseDown","onMinimapPanTo","offsetX","offsetY","heightZoom","widthZoom","Horizontal","Vertical","midPoint","_first","_second","view","getContainerDims","hostElem","parentNode","getBoundingClientRect","resizeSubscription","subscription","ChangeDetectorRef","ɵcmp","NgIf","NgTemplateOutlet","NgForOf","opacity","prototype","encapsulation","None","changeDetection","OnPush","template","styles","linkTemplate","nodeTemplate","clusterTemplate","defsTemplate","miniMapNodeTemplate","GraphModule","ɵmod","ɵinj","imports","declarations","exports","providers","NgxGraphModule"],"sources":["/home/imerit/Documents/flow-diagram/node_modules/@swimlane/ngx-graph/fesm2015/swimlane-ngx-graph.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Injectable, HostListener, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChild, ViewChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport * as ease from 'd3-ease';\nimport 'd3-transition';\nimport { Subject, Subscription, Observable, of, fromEvent } from 'rxjs';\nimport { first, debounceTime } from 'rxjs/operators';\nimport { identity, transform, translate, scale, toSVG, smoothMatrix } from 'transformation-matrix';\nimport { scaleOrdinal } from 'd3-scale';\nimport * as dagre from 'dagre';\nimport * as d3Force from 'd3-force';\nimport { forceSimulation, forceManyBody, forceCollide, forceLink } from 'd3-force';\nimport { d3adaptor } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Timer from 'd3-timer';\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar PanningAxis;\n(function (PanningAxis) {\n    PanningAxis[\"Both\"] = \"both\";\n    PanningAxis[\"Horizontal\"] = \"horizontal\";\n    PanningAxis[\"Vertical\"] = \"vertical\";\n})(PanningAxis || (PanningAxis = {}));\n\nvar MiniMapPosition;\n(function (MiniMapPosition) {\n    MiniMapPosition[\"UpperLeft\"] = \"UpperLeft\";\n    MiniMapPosition[\"UpperRight\"] = \"UpperRight\";\n})(MiniMapPosition || (MiniMapPosition = {}));\n\n/**\n * Throttle a function\n *\n * @export\n * @param {*}      func\n * @param {number} wait\n * @param {*}      [options]\n * @returns\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n *\n * @export\n * @param {number} duration\n * @param {*} [options]\n * @returns\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nlet colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: 'Ordinal',\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: 'Ordinal',\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: 'Continuous',\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: 'Ordinal',\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, this.domain);\n    }\n    generateColorScheme(scheme, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        return scaleOrdinal().range(scheme.domain).domain(domain);\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (typeof this.customColors === 'function') {\n            return this.customColors(value);\n        }\n        const formattedValue = value.toString();\n        let found; // todo type customColors\n        if (this.customColors && this.customColors.length > 0) {\n            found = this.customColors.find(mapping => {\n                return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n            });\n        }\n        if (found) {\n            return found.value;\n        }\n        else {\n            return this.scale(value);\n        }\n    }\n}\n\nfunction calculateViewDimensions({ width, height }) {\n    let chartWidth = width;\n    let chartHeight = height;\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight)\n    };\n}\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    // tslint:disable-next-line:directive-selector\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"LEFT_TO_RIGHT\"] = \"LR\";\n    Orientation[\"RIGHT_TO_LEFT\"] = \"RL\";\n    Orientation[\"TOP_TO_BOTTOM\"] = \"TB\";\n    Orientation[\"BOTTOM_TO_TOM\"] = \"BT\";\n})(Orientation || (Orientation = {}));\nvar Alignment;\n(function (Alignment) {\n    Alignment[\"CENTER\"] = \"C\";\n    Alignment[\"UP_LEFT\"] = \"UL\";\n    Alignment[\"UP_RIGHT\"] = \"UR\";\n    Alignment[\"DOWN_LEFT\"] = \"DL\";\n    Alignment[\"DOWN_RIGHT\"] = \"DR\";\n})(Alignment || (Alignment = {}));\nclass DagreLayout {\n    constructor() {\n        this.defaultSettings = {\n            orientation: Orientation.LEFT_TO_RIGHT,\n            marginX: 20,\n            marginY: 20,\n            edgePadding: 100,\n            rankPadding: 100,\n            nodePadding: 50,\n            multigraph: true,\n            compound: true\n        };\n        this.settings = {};\n    }\n    run(graph) {\n        this.createDagreGraph(graph);\n        dagre.layout(this.dagreGraph);\n        graph.edgeLabels = this.dagreGraph._edgeLabels;\n        for (const dagreNodeId in this.dagreGraph._nodes) {\n            const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n            const node = graph.nodes.find(n => n.id === dagreNode.id);\n            node.position = {\n                x: dagreNode.x,\n                y: dagreNode.y\n            };\n            node.dimension = {\n                width: dagreNode.width,\n                height: dagreNode.height\n            };\n        }\n        return graph;\n    }\n    updateEdge(graph, edge) {\n        const sourceNode = graph.nodes.find(n => n.id === edge.source);\n        const targetNode = graph.nodes.find(n => n.id === edge.target);\n        // determine new arrow position\n        const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n        const startingPoint = {\n            x: sourceNode.position.x,\n            y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n        };\n        const endingPoint = {\n            x: targetNode.position.x,\n            y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n        };\n        // generate new points\n        edge.points = [startingPoint, endingPoint];\n        return graph;\n    }\n    createDagreGraph(graph) {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n        this.dagreGraph.setGraph({\n            rankdir: settings.orientation,\n            marginx: settings.marginX,\n            marginy: settings.marginY,\n            edgesep: settings.edgePadding,\n            ranksep: settings.rankPadding,\n            nodesep: settings.nodePadding,\n            align: settings.align,\n            acyclicer: settings.acyclicer,\n            ranker: settings.ranker,\n            multigraph: settings.multigraph,\n            compound: settings.compound\n        });\n        // Default to assigning a new object as a label for each new edge.\n        this.dagreGraph.setDefaultEdgeLabel(() => {\n            return {\n            /* empty */\n            };\n        });\n        this.dagreNodes = graph.nodes.map(n => {\n            const node = Object.assign({}, n);\n            node.width = n.dimension.width;\n            node.height = n.dimension.height;\n            node.x = n.position.x;\n            node.y = n.position.y;\n            return node;\n        });\n        this.dagreEdges = graph.edges.map(l => {\n            const newLink = Object.assign({}, l);\n            if (!newLink.id) {\n                newLink.id = id();\n            }\n            return newLink;\n        });\n        for (const node of this.dagreNodes) {\n            if (!node.width) {\n                node.width = 20;\n            }\n            if (!node.height) {\n                node.height = 30;\n            }\n            // update dagre\n            this.dagreGraph.setNode(node.id, node);\n        }\n        // update dagre\n        for (const edge of this.dagreEdges) {\n            if (settings.multigraph) {\n                this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n            }\n            else {\n                this.dagreGraph.setEdge(edge.source, edge.target);\n            }\n        }\n        return this.dagreGraph;\n    }\n}\n\nclass DagreClusterLayout {\n    constructor() {\n        this.defaultSettings = {\n            orientation: Orientation.LEFT_TO_RIGHT,\n            marginX: 20,\n            marginY: 20,\n            edgePadding: 100,\n            rankPadding: 100,\n            nodePadding: 50,\n            multigraph: true,\n            compound: true\n        };\n        this.settings = {};\n    }\n    run(graph) {\n        this.createDagreGraph(graph);\n        dagre.layout(this.dagreGraph);\n        graph.edgeLabels = this.dagreGraph._edgeLabels;\n        const dagreToOutput = node => {\n            const dagreNode = this.dagreGraph._nodes[node.id];\n            return Object.assign(Object.assign({}, node), { position: {\n                    x: dagreNode.x,\n                    y: dagreNode.y\n                }, dimension: {\n                    width: dagreNode.width,\n                    height: dagreNode.height\n                } });\n        };\n        graph.clusters = (graph.clusters || []).map(dagreToOutput);\n        graph.nodes = graph.nodes.map(dagreToOutput);\n        return graph;\n    }\n    updateEdge(graph, edge) {\n        const sourceNode = graph.nodes.find(n => n.id === edge.source);\n        const targetNode = graph.nodes.find(n => n.id === edge.target);\n        // determine new arrow position\n        const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n        const startingPoint = {\n            x: sourceNode.position.x,\n            y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n        };\n        const endingPoint = {\n            x: targetNode.position.x,\n            y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n        };\n        // generate new points\n        edge.points = [startingPoint, endingPoint];\n        return graph;\n    }\n    createDagreGraph(graph) {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n        this.dagreGraph.setGraph({\n            rankdir: settings.orientation,\n            marginx: settings.marginX,\n            marginy: settings.marginY,\n            edgesep: settings.edgePadding,\n            ranksep: settings.rankPadding,\n            nodesep: settings.nodePadding,\n            align: settings.align,\n            acyclicer: settings.acyclicer,\n            ranker: settings.ranker,\n            multigraph: settings.multigraph,\n            compound: settings.compound\n        });\n        // Default to assigning a new object as a label for each new edge.\n        this.dagreGraph.setDefaultEdgeLabel(() => {\n            return {\n            /* empty */\n            };\n        });\n        this.dagreNodes = graph.nodes.map((n) => {\n            const node = Object.assign({}, n);\n            node.width = n.dimension.width;\n            node.height = n.dimension.height;\n            node.x = n.position.x;\n            node.y = n.position.y;\n            return node;\n        });\n        this.dagreClusters = graph.clusters || [];\n        this.dagreEdges = graph.edges.map(l => {\n            const newLink = Object.assign({}, l);\n            if (!newLink.id) {\n                newLink.id = id();\n            }\n            return newLink;\n        });\n        for (const node of this.dagreNodes) {\n            this.dagreGraph.setNode(node.id, node);\n        }\n        for (const cluster of this.dagreClusters) {\n            this.dagreGraph.setNode(cluster.id, cluster);\n            cluster.childNodeIds.forEach(childNodeId => {\n                this.dagreGraph.setParent(childNodeId, cluster.id);\n            });\n        }\n        // update dagre\n        for (const edge of this.dagreEdges) {\n            if (settings.multigraph) {\n                this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n            }\n            else {\n                this.dagreGraph.setEdge(edge.source, edge.target);\n            }\n        }\n        return this.dagreGraph;\n    }\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\nclass DagreNodesOnlyLayout {\n    constructor() {\n        this.defaultSettings = {\n            orientation: Orientation.LEFT_TO_RIGHT,\n            marginX: 20,\n            marginY: 20,\n            edgePadding: 100,\n            rankPadding: 100,\n            nodePadding: 50,\n            curveDistance: 20,\n            multigraph: true,\n            compound: true\n        };\n        this.settings = {};\n    }\n    run(graph) {\n        this.createDagreGraph(graph);\n        dagre.layout(this.dagreGraph);\n        graph.edgeLabels = this.dagreGraph._edgeLabels;\n        for (const dagreNodeId in this.dagreGraph._nodes) {\n            const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n            const node = graph.nodes.find(n => n.id === dagreNode.id);\n            node.position = {\n                x: dagreNode.x,\n                y: dagreNode.y\n            };\n            node.dimension = {\n                width: dagreNode.width,\n                height: dagreNode.height\n            };\n        }\n        for (const edge of graph.edges) {\n            this.updateEdge(graph, edge);\n        }\n        return graph;\n    }\n    updateEdge(graph, edge) {\n        const sourceNode = graph.nodes.find(n => n.id === edge.source);\n        const targetNode = graph.nodes.find(n => n.id === edge.target);\n        const rankAxis = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n        const orderAxis = rankAxis === 'y' ? 'x' : 'y';\n        const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n        // determine new arrow position\n        const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n        const startingPoint = {\n            [orderAxis]: sourceNode.position[orderAxis],\n            [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n        };\n        const endingPoint = {\n            [orderAxis]: targetNode.position[orderAxis],\n            [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n        };\n        const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n        // generate new points\n        edge.points = [\n            startingPoint,\n            {\n                [orderAxis]: startingPoint[orderAxis],\n                [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n            },\n            {\n                [orderAxis]: endingPoint[orderAxis],\n                [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n            },\n            endingPoint\n        ];\n        const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n        const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n        if (matchingEdgeLabel) {\n            matchingEdgeLabel.points = edge.points;\n        }\n        return graph;\n    }\n    createDagreGraph(graph) {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n        this.dagreGraph.setGraph({\n            rankdir: settings.orientation,\n            marginx: settings.marginX,\n            marginy: settings.marginY,\n            edgesep: settings.edgePadding,\n            ranksep: settings.rankPadding,\n            nodesep: settings.nodePadding,\n            align: settings.align,\n            acyclicer: settings.acyclicer,\n            ranker: settings.ranker,\n            multigraph: settings.multigraph,\n            compound: settings.compound\n        });\n        // Default to assigning a new object as a label for each new edge.\n        this.dagreGraph.setDefaultEdgeLabel(() => {\n            return {\n            /* empty */\n            };\n        });\n        this.dagreNodes = graph.nodes.map(n => {\n            const node = Object.assign({}, n);\n            node.width = n.dimension.width;\n            node.height = n.dimension.height;\n            node.x = n.position.x;\n            node.y = n.position.y;\n            return node;\n        });\n        this.dagreEdges = graph.edges.map(l => {\n            const newLink = Object.assign({}, l);\n            if (!newLink.id) {\n                newLink.id = id();\n            }\n            return newLink;\n        });\n        for (const node of this.dagreNodes) {\n            if (!node.width) {\n                node.width = 20;\n            }\n            if (!node.height) {\n                node.height = 30;\n            }\n            // update dagre\n            this.dagreGraph.setNode(node.id, node);\n        }\n        // update dagre\n        for (const edge of this.dagreEdges) {\n            if (settings.multigraph) {\n                this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n            }\n            else {\n                this.dagreGraph.setEdge(edge.source, edge.target);\n            }\n        }\n        return this.dagreGraph;\n    }\n}\n\nfunction toD3Node(maybeNode) {\n    if (typeof maybeNode === 'string') {\n        return {\n            id: maybeNode,\n            x: 0,\n            y: 0\n        };\n    }\n    return maybeNode;\n}\nclass D3ForceDirectedLayout {\n    constructor() {\n        this.defaultSettings = {\n            force: forceSimulation().force('charge', forceManyBody().strength(-150)).force('collide', forceCollide(5)),\n            forceLink: forceLink()\n                .id(node => node.id)\n                .distance(() => 100)\n        };\n        this.settings = {};\n        this.outputGraph$ = new Subject();\n    }\n    run(graph) {\n        this.inputGraph = graph;\n        this.d3Graph = {\n            nodes: [...this.inputGraph.nodes.map(n => (Object.assign({}, n)))],\n            edges: [...this.inputGraph.edges.map(e => (Object.assign({}, e)))]\n        };\n        this.outputGraph = {\n            nodes: [],\n            edges: [],\n            edgeLabels: []\n        };\n        this.outputGraph$.next(this.outputGraph);\n        this.settings = Object.assign({}, this.defaultSettings, this.settings);\n        if (this.settings.force) {\n            this.settings.force\n                .nodes(this.d3Graph.nodes)\n                .force('link', this.settings.forceLink.links(this.d3Graph.edges))\n                .alpha(0.5)\n                .restart()\n                .on('tick', () => {\n                this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n            });\n        }\n        return this.outputGraph$.asObservable();\n    }\n    updateEdge(graph, edge) {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        if (settings.force) {\n            settings.force\n                .nodes(this.d3Graph.nodes)\n                .force('link', settings.forceLink.links(this.d3Graph.edges))\n                .alpha(0.5)\n                .restart()\n                .on('tick', () => {\n                this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n            });\n        }\n        return this.outputGraph$.asObservable();\n    }\n    d3GraphToOutputGraph(d3Graph) {\n        this.outputGraph.nodes = this.d3Graph.nodes.map((node) => (Object.assign(Object.assign({}, node), { id: node.id || id(), position: {\n                x: node.x,\n                y: node.y\n            }, dimension: {\n                width: (node.dimension && node.dimension.width) || 20,\n                height: (node.dimension && node.dimension.height) || 20\n            }, transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0})` })));\n        this.outputGraph.edges = this.d3Graph.edges.map(edge => (Object.assign(Object.assign({}, edge), { source: toD3Node(edge.source).id, target: toD3Node(edge.target).id, points: [\n                {\n                    x: toD3Node(edge.source).x,\n                    y: toD3Node(edge.source).y\n                },\n                {\n                    x: toD3Node(edge.target).x,\n                    y: toD3Node(edge.target).y\n                }\n            ] })));\n        this.outputGraph.edgeLabels = this.outputGraph.edges;\n        return this.outputGraph;\n    }\n    onDragStart(draggingNode, $event) {\n        this.settings.force.alphaTarget(0.3).restart();\n        const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n        if (!node) {\n            return;\n        }\n        this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n        node.fx = $event.x - this.draggingStart.x;\n        node.fy = $event.y - this.draggingStart.y;\n    }\n    onDrag(draggingNode, $event) {\n        if (!draggingNode) {\n            return;\n        }\n        const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n        if (!node) {\n            return;\n        }\n        node.fx = $event.x - this.draggingStart.x;\n        node.fy = $event.y - this.draggingStart.y;\n    }\n    onDragEnd(draggingNode, $event) {\n        if (!draggingNode) {\n            return;\n        }\n        const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n        if (!node) {\n            return;\n        }\n        this.settings.force.alphaTarget(0);\n        node.fx = undefined;\n        node.fy = undefined;\n    }\n}\n\nfunction toNode(nodes, nodeRef) {\n    if (typeof nodeRef === 'number') {\n        return nodes[nodeRef];\n    }\n    return nodeRef;\n}\nclass ColaForceDirectedLayout {\n    constructor() {\n        this.defaultSettings = {\n            force: d3adaptor(Object.assign(Object.assign(Object.assign({}, d3Dispatch), d3Force), d3Timer))\n                .linkDistance(150)\n                .avoidOverlaps(true),\n            viewDimensions: {\n                width: 600,\n                height: 600\n            }\n        };\n        this.settings = {};\n        this.outputGraph$ = new Subject();\n    }\n    run(graph) {\n        this.inputGraph = graph;\n        if (!this.inputGraph.clusters) {\n            this.inputGraph.clusters = [];\n        }\n        this.internalGraph = {\n            nodes: [\n                ...this.inputGraph.nodes.map(n => (Object.assign(Object.assign({}, n), { width: n.dimension ? n.dimension.width : 20, height: n.dimension ? n.dimension.height : 20 })))\n            ],\n            groups: [\n                ...this.inputGraph.clusters.map((cluster) => ({\n                    padding: 5,\n                    groups: cluster.childNodeIds\n                        .map(nodeId => this.inputGraph.clusters.findIndex(node => node.id === nodeId))\n                        .filter(x => x >= 0),\n                    leaves: cluster.childNodeIds\n                        .map(nodeId => this.inputGraph.nodes.findIndex(node => node.id === nodeId))\n                        .filter(x => x >= 0)\n                }))\n            ],\n            links: [\n                ...this.inputGraph.edges\n                    .map(e => {\n                    const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n                    const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n                    if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n                        return undefined;\n                    }\n                    return Object.assign(Object.assign({}, e), { source: sourceNodeIndex, target: targetNodeIndex });\n                })\n                    .filter(x => !!x)\n            ],\n            groupLinks: [\n                ...this.inputGraph.edges\n                    .map(e => {\n                    const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n                    const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n                    if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n                        return undefined;\n                    }\n                    return e;\n                })\n                    .filter(x => !!x)\n            ]\n        };\n        this.outputGraph = {\n            nodes: [],\n            clusters: [],\n            edges: [],\n            edgeLabels: []\n        };\n        this.outputGraph$.next(this.outputGraph);\n        this.settings = Object.assign({}, this.defaultSettings, this.settings);\n        if (this.settings.force) {\n            this.settings.force = this.settings.force\n                .nodes(this.internalGraph.nodes)\n                .groups(this.internalGraph.groups)\n                .links(this.internalGraph.links)\n                .alpha(0.5)\n                .on('tick', () => {\n                if (this.settings.onTickListener) {\n                    this.settings.onTickListener(this.internalGraph);\n                }\n                this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n            });\n            if (this.settings.viewDimensions) {\n                this.settings.force = this.settings.force.size([\n                    this.settings.viewDimensions.width,\n                    this.settings.viewDimensions.height\n                ]);\n            }\n            if (this.settings.forceModifierFn) {\n                this.settings.force = this.settings.forceModifierFn(this.settings.force);\n            }\n            this.settings.force.start();\n        }\n        return this.outputGraph$.asObservable();\n    }\n    updateEdge(graph, edge) {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        if (settings.force) {\n            settings.force.start();\n        }\n        return this.outputGraph$.asObservable();\n    }\n    internalGraphToOutputGraph(internalGraph) {\n        this.outputGraph.nodes = internalGraph.nodes.map(node => (Object.assign(Object.assign({}, node), { id: node.id || id(), position: {\n                x: node.x,\n                y: node.y\n            }, dimension: {\n                width: (node.dimension && node.dimension.width) || 20,\n                height: (node.dimension && node.dimension.height) || 20\n            }, transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0})` })));\n        this.outputGraph.edges = internalGraph.links\n            .map(edge => {\n            const source = toNode(internalGraph.nodes, edge.source);\n            const target = toNode(internalGraph.nodes, edge.target);\n            return Object.assign(Object.assign({}, edge), { source: source.id, target: target.id, points: [\n                    source.bounds.rayIntersection(target.bounds.cx(), target.bounds.cy()),\n                    target.bounds.rayIntersection(source.bounds.cx(), source.bounds.cy())\n                ] });\n        })\n            .concat(internalGraph.groupLinks.map(groupLink => {\n            const sourceNode = internalGraph.nodes.find(foundNode => foundNode.id === groupLink.source);\n            const targetNode = internalGraph.nodes.find(foundNode => foundNode.id === groupLink.target);\n            const source = sourceNode || internalGraph.groups.find(foundGroup => foundGroup.id === groupLink.source);\n            const target = targetNode || internalGraph.groups.find(foundGroup => foundGroup.id === groupLink.target);\n            return Object.assign(Object.assign({}, groupLink), { source: source.id, target: target.id, points: [\n                    source.bounds.rayIntersection(target.bounds.cx(), target.bounds.cy()),\n                    target.bounds.rayIntersection(source.bounds.cx(), source.bounds.cy())\n                ] });\n        }));\n        this.outputGraph.clusters = internalGraph.groups.map((group, index) => {\n            const inputGroup = this.inputGraph.clusters[index];\n            return Object.assign(Object.assign({}, inputGroup), { dimension: {\n                    width: group.bounds ? group.bounds.width() : 20,\n                    height: group.bounds ? group.bounds.height() : 20\n                }, position: {\n                    x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n                    y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n                } });\n        });\n        this.outputGraph.edgeLabels = this.outputGraph.edges;\n        return this.outputGraph;\n    }\n    onDragStart(draggingNode, $event) {\n        const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n        const node = this.internalGraph.nodes[nodeIndex];\n        if (!node) {\n            return;\n        }\n        this.draggingStart = { x: node.x - $event.x, y: node.y - $event.y };\n        node.fixed = 1;\n        this.settings.force.start();\n    }\n    onDrag(draggingNode, $event) {\n        if (!draggingNode) {\n            return;\n        }\n        const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n        const node = this.internalGraph.nodes[nodeIndex];\n        if (!node) {\n            return;\n        }\n        node.x = this.draggingStart.x + $event.x;\n        node.y = this.draggingStart.y + $event.y;\n    }\n    onDragEnd(draggingNode, $event) {\n        if (!draggingNode) {\n            return;\n        }\n        const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n        const node = this.internalGraph.nodes[nodeIndex];\n        if (!node) {\n            return;\n        }\n        node.fixed = 0;\n    }\n}\n\nconst layouts = {\n    dagre: DagreLayout,\n    dagreCluster: DagreClusterLayout,\n    dagreNodesOnly: DagreNodesOnlyLayout,\n    d3ForceDirected: D3ForceDirectedLayout,\n    colaForceDirected: ColaForceDirectedLayout\n};\nclass LayoutService {\n    getLayout(name) {\n        if (layouts[name]) {\n            return new layouts[name]();\n        }\n        else {\n            throw new Error(`Unknown layout type '${name}'`);\n        }\n    }\n}\nLayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LayoutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nLayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LayoutService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: LayoutService, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n// tslint:disable-next-line: directive-selector\nclass MouseWheelDirective {\n    constructor() {\n        this.mouseWheelUp = new EventEmitter();\n        this.mouseWheelDown = new EventEmitter();\n    }\n    onMouseWheelChrome(event) {\n        this.mouseWheelFunc(event);\n    }\n    onMouseWheelFirefox(event) {\n        this.mouseWheelFunc(event);\n    }\n    onWheel(event) {\n        this.mouseWheelFunc(event);\n    }\n    onMouseWheelIE(event) {\n        this.mouseWheelFunc(event);\n    }\n    mouseWheelFunc(event) {\n        if (window.event) {\n            event = window.event;\n        }\n        const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail || event.deltaY || event.deltaX));\n        // Firefox don't have native support for wheel event, as a result delta values are reverse\n        const isWheelMouseUp = event.wheelDelta ? delta > 0 : delta < 0;\n        const isWheelMouseDown = event.wheelDelta ? delta < 0 : delta > 0;\n        if (isWheelMouseUp) {\n            this.mouseWheelUp.emit(event);\n        }\n        else if (isWheelMouseDown) {\n            this.mouseWheelDown.emit(event);\n        }\n        // for IE\n        event.returnValue = false;\n        // for Chrome and Firefox\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n    }\n}\nMouseWheelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MouseWheelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMouseWheelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: MouseWheelDirective, selector: \"[mouseWheel]\", outputs: { mouseWheelUp: \"mouseWheelUp\", mouseWheelDown: \"mouseWheelDown\" }, host: { listeners: { \"mousewheel\": \"onMouseWheelChrome($event)\", \"DOMMouseScroll\": \"onMouseWheelFirefox($event)\", \"wheel\": \"onWheel($event)\", \"onmousewheel\": \"onMouseWheelIE($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: MouseWheelDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[mouseWheel]' }]\n        }], propDecorators: { mouseWheelUp: [{\n                type: Output\n            }], mouseWheelDown: [{\n                type: Output\n            }], onMouseWheelChrome: [{\n                type: HostListener,\n                args: ['mousewheel', ['$event']]\n            }], onMouseWheelFirefox: [{\n                type: HostListener,\n                args: ['DOMMouseScroll', ['$event']]\n            }], onWheel: [{\n                type: HostListener,\n                args: ['wheel', ['$event']]\n            }], onMouseWheelIE: [{\n                type: HostListener,\n                args: ['onmousewheel', ['$event']]\n            }] } });\n\nclass GraphComponent {\n    constructor(el, zone, cd, layoutService) {\n        this.el = el;\n        this.zone = zone;\n        this.cd = cd;\n        this.layoutService = layoutService;\n        this.nodes = [];\n        this.clusters = [];\n        this.links = [];\n        this.activeEntries = [];\n        this.draggingEnabled = true;\n        this.panningEnabled = true;\n        this.panningAxis = PanningAxis.Both;\n        this.enableZoom = true;\n        this.zoomSpeed = 0.1;\n        this.minZoomLevel = 0.1;\n        this.maxZoomLevel = 4.0;\n        this.autoZoom = false;\n        this.panOnZoom = true;\n        this.animate = false;\n        this.autoCenter = false;\n        this.enableTrackpadSupport = false;\n        this.showMiniMap = false;\n        this.miniMapMaxWidth = 100;\n        this.miniMapPosition = MiniMapPosition.UpperRight;\n        this.scheme = 'cool';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.zoomChange = new EventEmitter();\n        this.clickHandler = new EventEmitter();\n        this.isMouseMoveCalled = false;\n        this.graphSubscription = new Subscription();\n        this.subscriptions = [];\n        this.isPanning = false;\n        this.isDragging = false;\n        this.initialized = false;\n        this.graphDims = { width: 0, height: 0 };\n        this._oldLinks = [];\n        this.oldNodes = new Set();\n        this.oldClusters = new Set();\n        this.transformationMatrix = identity();\n        this._touchLastX = null;\n        this._touchLastY = null;\n        this.minimapScaleCoefficient = 3;\n        this.minimapOffsetX = 0;\n        this.minimapOffsetY = 0;\n        this.isMinimapPanning = false;\n        this.groupResultsBy = node => node.label;\n    }\n    /**\n     * Get the current zoom level\n     */\n    get zoomLevel() {\n        return this.transformationMatrix.a;\n    }\n    /**\n     * Set the current zoom level\n     */\n    set zoomLevel(level) {\n        this.zoomTo(Number(level));\n    }\n    /**\n     * Get the current `x` position of the graph\n     */\n    get panOffsetX() {\n        return this.transformationMatrix.e;\n    }\n    /**\n     * Set the current `x` position of the graph\n     */\n    set panOffsetX(x) {\n        this.panTo(Number(x), null);\n    }\n    /**\n     * Get the current `y` position of the graph\n     */\n    get panOffsetY() {\n        return this.transformationMatrix.f;\n    }\n    /**\n     * Set the current `y` position of the graph\n     */\n    set panOffsetY(y) {\n        this.panTo(null, Number(y));\n    }\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngOnInit() {\n        if (this.update$) {\n            this.subscriptions.push(this.update$.subscribe(() => {\n                this.update();\n            }));\n        }\n        if (this.center$) {\n            this.subscriptions.push(this.center$.subscribe(() => {\n                this.center();\n            }));\n        }\n        if (this.zoomToFit$) {\n            this.subscriptions.push(this.zoomToFit$.subscribe(() => {\n                this.zoomToFit();\n            }));\n        }\n        if (this.panToNode$) {\n            this.subscriptions.push(this.panToNode$.subscribe((nodeId) => {\n                this.panToNodeId(nodeId);\n            }));\n        }\n        this.minimapClipPathId = `minimapClip${id()}`;\n    }\n    ngOnChanges(changes) {\n        this.basicUpdate();\n        const { layout, layoutSettings, nodes, clusters, links } = changes;\n        this.setLayout(this.layout);\n        if (layoutSettings) {\n            this.setLayoutSettings(this.layoutSettings);\n        }\n        this.update();\n    }\n    setLayout(layout) {\n        this.initialized = false;\n        if (!layout) {\n            layout = 'dagre';\n        }\n        if (typeof layout === 'string') {\n            this.layout = this.layoutService.getLayout(layout);\n            this.setLayoutSettings(this.layoutSettings);\n        }\n    }\n    setLayoutSettings(settings) {\n        if (this.layout && typeof this.layout !== 'string') {\n            this.layout.settings = settings;\n        }\n    }\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n        for (const sub of this.subscriptions) {\n            sub.unsubscribe();\n        }\n        this.subscriptions = null;\n    }\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.el, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n        setTimeout(() => this.update());\n    }\n    /**\n     * Base class update implementation for the dag graph\n     *\n     * @memberOf GraphComponent\n     */\n    update() {\n        this.basicUpdate();\n        if (!this.curve) {\n            this.curve = shape.curveBundle.beta(1);\n        }\n        this.zone.run(() => {\n            this.dims = calculateViewDimensions({\n                width: this.width,\n                height: this.height\n            });\n            this.seriesDomain = this.getSeriesDomain();\n            this.setColors();\n            this.createGraph();\n            this.updateTransform();\n            this.initialized = true;\n        });\n    }\n    /**\n     * Creates the dagre graph engine\n     *\n     * @memberOf GraphComponent\n     */\n    createGraph() {\n        this.graphSubscription.unsubscribe();\n        this.graphSubscription = new Subscription();\n        const initializeNode = (n) => {\n            if (!n.meta) {\n                n.meta = {};\n            }\n            if (!n.id) {\n                n.id = id();\n            }\n            if (!n.dimension) {\n                n.dimension = {\n                    width: this.nodeWidth ? this.nodeWidth : 30,\n                    height: this.nodeHeight ? this.nodeHeight : 30\n                };\n                n.meta.forceDimensions = false;\n            }\n            else {\n                n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n            }\n            n.position = {\n                x: 0,\n                y: 0\n            };\n            n.data = n.data ? n.data : {};\n            return n;\n        };\n        this.graph = {\n            nodes: this.nodes.length > 0 ? [...this.nodes].map(initializeNode) : [],\n            clusters: this.clusters && this.clusters.length > 0 ? [...this.clusters].map(initializeNode) : [],\n            edges: this.links.length > 0\n                ? [...this.links].map(e => {\n                    if (!e.id) {\n                        e.id = id();\n                    }\n                    return e;\n                })\n                : []\n        };\n        requestAnimationFrame(() => this.draw());\n    }\n    /**\n     * Draws the graph using dagre layouts\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    draw() {\n        if (!this.layout || typeof this.layout === 'string') {\n            return;\n        }\n        // Calc view dims for the nodes\n        this.applyNodeDimensions();\n        // Recalc the layout\n        const result = this.layout.run(this.graph);\n        const result$ = result instanceof Observable ? result : of(result);\n        this.graphSubscription.add(result$.subscribe(graph => {\n            this.graph = graph;\n            this.tick();\n        }));\n        if (this.graph.nodes.length === 0) {\n            return;\n        }\n        result$.pipe(first()).subscribe(() => this.applyNodeDimensions());\n    }\n    tick() {\n        // Transposes view options to the node\n        const oldNodes = new Set();\n        this.graph.nodes.map(n => {\n            n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 || 0})`;\n            if (!n.data) {\n                n.data = {};\n            }\n            n.data.color = this.colors.getColor(this.groupResultsBy(n));\n            oldNodes.add(n.id);\n        });\n        const oldClusters = new Set();\n        (this.graph.clusters || []).map(n => {\n            n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 || 0})`;\n            if (!n.data) {\n                n.data = {};\n            }\n            n.data.color = this.colors.getColor(this.groupResultsBy(n));\n            oldClusters.add(n.id);\n        });\n        // Prevent animations on new nodes\n        setTimeout(() => {\n            this.oldNodes = oldNodes;\n            this.oldClusters = oldClusters;\n        }, 500);\n        // Update the labels to the new positions\n        const newLinks = [];\n        for (const edgeLabelId in this.graph.edgeLabels) {\n            const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n            const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n            const isMultigraph = this.layout && typeof this.layout !== 'string' && this.layout.settings && this.layout.settings.multigraph;\n            let oldLink = isMultigraph\n                ? this._oldLinks.find(ol => `${ol.source}${ol.target}${ol.id}` === normKey)\n                : this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n            const linkFromGraph = isMultigraph\n                ? this.graph.edges.find(nl => `${nl.source}${nl.target}${nl.id}` === normKey)\n                : this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey);\n            if (!oldLink) {\n                oldLink = linkFromGraph || edgeLabel;\n            }\n            else if (oldLink.data &&\n                linkFromGraph &&\n                linkFromGraph.data &&\n                JSON.stringify(oldLink.data) !== JSON.stringify(linkFromGraph.data)) {\n                // Compare old link to new link and replace if not equal\n                oldLink.data = linkFromGraph.data;\n            }\n            oldLink.oldLine = oldLink.line;\n            const points = edgeLabel.points;\n            const line = this.generateLine(points);\n            const newLink = Object.assign({}, oldLink);\n            newLink.line = line;\n            newLink.points = points;\n            this.updateMidpointOnEdge(newLink, points);\n            const textPos = points[Math.floor(points.length / 2)];\n            if (textPos) {\n                newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n            }\n            newLink.textAngle = 0;\n            if (!newLink.oldLine) {\n                newLink.oldLine = newLink.line;\n            }\n            this.calcDominantBaseline(newLink);\n            newLinks.push(newLink);\n        }\n        this.graph.edges = newLinks;\n        // Map the old links for animations\n        if (this.graph.edges) {\n            this._oldLinks = this.graph.edges.map(l => {\n                const newL = Object.assign({}, l);\n                newL.oldLine = l.line;\n                return newL;\n            });\n        }\n        this.updateMinimap();\n        if (this.autoZoom) {\n            this.zoomToFit();\n        }\n        if (this.autoCenter) {\n            // Auto-center when rendering\n            this.center();\n        }\n        requestAnimationFrame(() => this.redrawLines());\n        this.cd.markForCheck();\n    }\n    getMinimapTransform() {\n        switch (this.miniMapPosition) {\n            case MiniMapPosition.UpperLeft: {\n                return '';\n            }\n            case MiniMapPosition.UpperRight: {\n                return 'translate(' + (this.dims.width - this.graphDims.width / this.minimapScaleCoefficient) + ',' + 0 + ')';\n            }\n            default: {\n                return '';\n            }\n        }\n    }\n    updateGraphDims() {\n        let minX = +Infinity;\n        let maxX = -Infinity;\n        let minY = +Infinity;\n        let maxY = -Infinity;\n        for (let i = 0; i < this.graph.nodes.length; i++) {\n            const node = this.graph.nodes[i];\n            minX = node.position.x < minX ? node.position.x : minX;\n            minY = node.position.y < minY ? node.position.y : minY;\n            maxX = node.position.x + node.dimension.width > maxX ? node.position.x + node.dimension.width : maxX;\n            maxY = node.position.y + node.dimension.height > maxY ? node.position.y + node.dimension.height : maxY;\n        }\n        minX -= 100;\n        minY -= 100;\n        maxX += 100;\n        maxY += 100;\n        this.graphDims.width = maxX - minX;\n        this.graphDims.height = maxY - minY;\n        this.minimapOffsetX = minX;\n        this.minimapOffsetY = minY;\n    }\n    updateMinimap() {\n        // Calculate the height/width total, but only if we have any nodes\n        if (this.graph.nodes && this.graph.nodes.length) {\n            this.updateGraphDims();\n            if (this.miniMapMaxWidth) {\n                this.minimapScaleCoefficient = this.graphDims.width / this.miniMapMaxWidth;\n            }\n            if (this.miniMapMaxHeight) {\n                this.minimapScaleCoefficient = Math.max(this.minimapScaleCoefficient, this.graphDims.height / this.miniMapMaxHeight);\n            }\n            this.minimapTransform = this.getMinimapTransform();\n        }\n    }\n    /**\n     * Measures the node element and applies the dimensions\n     *\n     * @memberOf GraphComponent\n     */\n    applyNodeDimensions() {\n        if (this.nodeElements && this.nodeElements.length) {\n            this.nodeElements.map(elem => {\n                const nativeElement = elem.nativeElement;\n                const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n                if (!node) {\n                    return;\n                }\n                // calculate the height\n                let dims;\n                try {\n                    dims = nativeElement.getBBox();\n                    if (!dims.width || !dims.height) {\n                        return;\n                    }\n                }\n                catch (ex) {\n                    // Skip drawing if element is not displayed - Firefox would throw an error here\n                    return;\n                }\n                if (this.nodeHeight) {\n                    node.dimension.height =\n                        node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n                }\n                else {\n                    node.dimension.height =\n                        node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n                }\n                if (this.nodeMaxHeight) {\n                    node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n                }\n                if (this.nodeMinHeight) {\n                    node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n                }\n                if (this.nodeWidth) {\n                    node.dimension.width =\n                        node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n                }\n                else {\n                    // calculate the width\n                    if (nativeElement.getElementsByTagName('text').length) {\n                        let maxTextDims;\n                        try {\n                            for (const textElem of nativeElement.getElementsByTagName('text')) {\n                                const currentBBox = textElem.getBBox();\n                                if (!maxTextDims) {\n                                    maxTextDims = currentBBox;\n                                }\n                                else {\n                                    if (currentBBox.width > maxTextDims.width) {\n                                        maxTextDims.width = currentBBox.width;\n                                    }\n                                    if (currentBBox.height > maxTextDims.height) {\n                                        maxTextDims.height = currentBBox.height;\n                                    }\n                                }\n                            }\n                        }\n                        catch (ex) {\n                            // Skip drawing if element is not displayed - Firefox would throw an error here\n                            return;\n                        }\n                        node.dimension.width =\n                            node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n                    }\n                    else {\n                        node.dimension.width =\n                            node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n                    }\n                }\n                if (this.nodeMaxWidth) {\n                    node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n                }\n                if (this.nodeMinWidth) {\n                    node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n                }\n            });\n        }\n    }\n    /**\n     * Redraws the lines when dragged or viewport updated\n     *\n     * @memberOf GraphComponent\n     */\n    redrawLines(_animate = this.animate) {\n        this.linkElements.map(linkEl => {\n            const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n            if (edge) {\n                const linkSelection = select(linkEl.nativeElement).select('.line');\n                linkSelection\n                    .attr('d', edge.oldLine)\n                    .transition()\n                    .ease(ease.easeSinInOut)\n                    .duration(_animate ? 500 : 0)\n                    .attr('d', edge.line);\n                const textPathSelection = select(this.el.nativeElement).select(`#${edge.id}`);\n                textPathSelection\n                    .attr('d', edge.oldTextPath)\n                    .transition()\n                    .ease(ease.easeSinInOut)\n                    .duration(_animate ? 500 : 0)\n                    .attr('d', edge.textPath);\n                this.updateMidpointOnEdge(edge, edge.points);\n            }\n        });\n    }\n    /**\n     * Calculate the text directions / flipping\n     *\n     * @memberOf GraphComponent\n     */\n    calcDominantBaseline(link) {\n        const firstPoint = link.points[0];\n        const lastPoint = link.points[link.points.length - 1];\n        link.oldTextPath = link.textPath;\n        if (lastPoint.x < firstPoint.x) {\n            link.dominantBaseline = 'text-before-edge';\n            // reverse text path for when its flipped upside down\n            link.textPath = this.generateLine([...link.points].reverse());\n        }\n        else {\n            link.dominantBaseline = 'text-after-edge';\n            link.textPath = link.line;\n        }\n    }\n    /**\n     * Generate the new line path\n     *\n     * @memberOf GraphComponent\n     */\n    generateLine(points) {\n        const lineFunction = shape\n            .line()\n            .x(d => d.x)\n            .y(d => d.y)\n            .curve(this.curve);\n        return lineFunction(points);\n    }\n    /**\n     * Zoom was invoked from event\n     *\n     * @memberOf GraphComponent\n     */\n    onZoom($event, direction) {\n        if (this.enableTrackpadSupport && !$event.ctrlKey) {\n            this.pan($event.deltaX * -1, $event.deltaY * -1);\n            return;\n        }\n        const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\n        // Check that zooming wouldn't put us out of bounds\n        const newZoomLevel = this.zoomLevel * zoomFactor;\n        if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n            return;\n        }\n        // Check if zooming is enabled or not\n        if (!this.enableZoom) {\n            return;\n        }\n        if (this.panOnZoom === true && $event) {\n            // Absolute mouse X/Y on the screen\n            const mouseX = $event.clientX;\n            const mouseY = $event.clientY;\n            // Transform the mouse X/Y into a SVG X/Y\n            const svg = this.el.nativeElement.querySelector('svg');\n            const svgGroup = svg.querySelector('g.chart');\n            const point = svg.createSVGPoint();\n            point.x = mouseX;\n            point.y = mouseY;\n            const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\n            // Panzoom\n            this.pan(svgPoint.x, svgPoint.y, true);\n            this.zoom(zoomFactor);\n            this.pan(-svgPoint.x, -svgPoint.y, true);\n        }\n        else {\n            this.zoom(zoomFactor);\n        }\n    }\n    /**\n     * Pan by x/y\n     *\n     * @param x\n     * @param y\n     */\n    pan(x, y, ignoreZoomLevel = false) {\n        const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n        this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n        this.updateTransform();\n    }\n    /**\n     * Pan to a fixed x/y\n     *\n     */\n    panTo(x, y) {\n        if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n            return;\n        }\n        const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n        const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n        this.transformationMatrix = transform(this.transformationMatrix, translate(panX / this.zoomLevel, panY / this.zoomLevel));\n        this.updateTransform();\n    }\n    /**\n     * Zoom by a factor\n     *\n     */\n    zoom(factor) {\n        this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n        this.zoomChange.emit(this.zoomLevel);\n        this.updateTransform();\n    }\n    /**\n     * Zoom to a fixed level\n     *\n     */\n    zoomTo(level) {\n        this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n        this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n        this.zoomChange.emit(this.zoomLevel);\n        this.updateTransform();\n        this.update();\n    }\n    /**\n     * Drag was invoked from an event\n     *\n     * @memberOf GraphComponent\n     */\n    onDrag(event) {\n        if (!this.draggingEnabled) {\n            return;\n        }\n        const node = this.draggingNode;\n        if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n            this.layout.onDrag(node, event);\n        }\n        node.position.x += event.movementX / this.zoomLevel;\n        node.position.y += event.movementY / this.zoomLevel;\n        // move the node\n        const x = node.position.x - node.dimension.width / 2;\n        const y = node.position.y - node.dimension.height / 2;\n        node.transform = `translate(${x}, ${y})`;\n        for (const link of this.graph.edges) {\n            if (link.target === node.id ||\n                link.source === node.id ||\n                link.target.id === node.id ||\n                link.source.id === node.id) {\n                if (this.layout && typeof this.layout !== 'string') {\n                    const result = this.layout.updateEdge(this.graph, link);\n                    const result$ = result instanceof Observable ? result : of(result);\n                    this.graphSubscription.add(result$.subscribe(graph => {\n                        this.graph = graph;\n                        this.redrawEdge(link);\n                    }));\n                }\n            }\n        }\n        this.redrawLines(false);\n        this.updateMinimap();\n    }\n    redrawEdge(edge) {\n        const line = this.generateLine(edge.points);\n        this.calcDominantBaseline(edge);\n        edge.oldLine = edge.line;\n        edge.line = line;\n    }\n    /**\n     * Update the entire view for the new pan position\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    updateTransform() {\n        this.transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n    }\n    /**\n     * Node was clicked\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    onClick(event) {\n        this.select.emit(event);\n    }\n    /**\n     * Node was focused\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    onActivate(event) {\n        if (this.activeEntries.indexOf(event) > -1) {\n            return;\n        }\n        this.activeEntries = [event, ...this.activeEntries];\n        this.activate.emit({ value: event, entries: this.activeEntries });\n    }\n    /**\n     * Node was defocused\n     *\n     * @memberOf GraphComponent\n     */\n    onDeactivate(event) {\n        const idx = this.activeEntries.indexOf(event);\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: event, entries: this.activeEntries });\n    }\n    /**\n     * Get the domain series for the nodes\n     *\n     * @memberOf GraphComponent\n     */\n    getSeriesDomain() {\n        return this.nodes\n            .map(d => this.groupResultsBy(d))\n            .reduce((nodes, node) => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\n            .sort();\n    }\n    /**\n     * Tracking for the link\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    trackLinkBy(index, link) {\n        return link.id;\n    }\n    /**\n     * Tracking for the node\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    trackNodeBy(index, node) {\n        return node.id;\n    }\n    /**\n     * Sets the colors the nodes\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.seriesDomain, this.customColors);\n    }\n    /**\n     * On mouse move event, used for panning and dragging.\n     *\n     * @memberOf GraphComponent\n     */\n    onMouseMove($event) {\n        this.isMouseMoveCalled = true;\n        if ((this.isPanning || this.isMinimapPanning) && this.panningEnabled) {\n            this.panWithConstraints(this.panningAxis, $event);\n        }\n        else if (this.isDragging && this.draggingEnabled) {\n            this.onDrag($event);\n        }\n    }\n    onMouseDown(event) {\n        this.isMouseMoveCalled = false;\n    }\n    graphClick(event) {\n        if (!this.isMouseMoveCalled)\n            this.clickHandler.emit(event);\n    }\n    /**\n     * On touch start event to enable panning.\n     *\n     * @memberOf GraphComponent\n     */\n    onTouchStart(event) {\n        this._touchLastX = event.changedTouches[0].clientX;\n        this._touchLastY = event.changedTouches[0].clientY;\n        this.isPanning = true;\n    }\n    /**\n     * On touch move event, used for panning.\n     *\n     */\n    onTouchMove($event) {\n        if (this.isPanning && this.panningEnabled) {\n            const clientX = $event.changedTouches[0].clientX;\n            const clientY = $event.changedTouches[0].clientY;\n            const movementX = clientX - this._touchLastX;\n            const movementY = clientY - this._touchLastY;\n            this._touchLastX = clientX;\n            this._touchLastY = clientY;\n            this.pan(movementX, movementY);\n        }\n    }\n    /**\n     * On touch end event to disable panning.\n     *\n     * @memberOf GraphComponent\n     */\n    onTouchEnd(event) {\n        this.isPanning = false;\n    }\n    /**\n     * On mouse up event to disable panning/dragging.\n     *\n     * @memberOf GraphComponent\n     */\n    onMouseUp(event) {\n        this.isDragging = false;\n        this.isPanning = false;\n        this.isMinimapPanning = false;\n        if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n            this.layout.onDragEnd(this.draggingNode, event);\n        }\n    }\n    /**\n     * On node mouse down to kick off dragging\n     *\n     * @memberOf GraphComponent\n     */\n    onNodeMouseDown(event, node) {\n        if (!this.draggingEnabled) {\n            return;\n        }\n        this.isDragging = true;\n        this.draggingNode = node;\n        if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n            this.layout.onDragStart(node, event);\n        }\n    }\n    /**\n     * On minimap drag mouse down to kick off minimap panning\n     *\n     * @memberOf GraphComponent\n     */\n    onMinimapDragMouseDown() {\n        this.isMinimapPanning = true;\n    }\n    /**\n     * On minimap pan event. Pans the graph to the clicked position\n     *\n     * @memberOf GraphComponent\n     */\n    onMinimapPanTo(event) {\n        const x = event.offsetX - (this.dims.width - (this.graphDims.width + this.minimapOffsetX) / this.minimapScaleCoefficient);\n        const y = event.offsetY + this.minimapOffsetY / this.minimapScaleCoefficient;\n        this.panTo(x * this.minimapScaleCoefficient, y * this.minimapScaleCoefficient);\n        this.isMinimapPanning = true;\n    }\n    /**\n     * Center the graph in the viewport\n     */\n    center() {\n        this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n    }\n    /**\n     * Zooms to fit the entier graph\n     */\n    zoomToFit() {\n        const heightZoom = this.dims.height / this.graphDims.height;\n        const widthZoom = this.dims.width / this.graphDims.width;\n        let zoomLevel = Math.min(heightZoom, widthZoom, 1);\n        if (zoomLevel < this.minZoomLevel) {\n            zoomLevel = this.minZoomLevel;\n        }\n        if (zoomLevel > this.maxZoomLevel) {\n            zoomLevel = this.maxZoomLevel;\n        }\n        if (zoomLevel !== this.zoomLevel) {\n            this.zoomLevel = zoomLevel;\n            this.updateTransform();\n            this.zoomChange.emit(this.zoomLevel);\n        }\n    }\n    /**\n     * Pans to the node\n     * @param nodeId\n     */\n    panToNodeId(nodeId) {\n        const node = this.graph.nodes.find(n => n.id === nodeId);\n        if (!node) {\n            return;\n        }\n        this.panTo(node.position.x, node.position.y);\n    }\n    panWithConstraints(key, event) {\n        let x = event.movementX;\n        let y = event.movementY;\n        if (this.isMinimapPanning) {\n            x = -this.minimapScaleCoefficient * x * this.zoomLevel;\n            y = -this.minimapScaleCoefficient * y * this.zoomLevel;\n        }\n        switch (key) {\n            case PanningAxis.Horizontal:\n                this.pan(x, 0);\n                break;\n            case PanningAxis.Vertical:\n                this.pan(0, y);\n                break;\n            default:\n                this.pan(x, y);\n                break;\n        }\n    }\n    updateMidpointOnEdge(edge, points) {\n        if (!edge || !points) {\n            return;\n        }\n        if (points.length % 2 === 1) {\n            edge.midPoint = points[Math.floor(points.length / 2)];\n        }\n        else {\n            const _first = points[points.length / 2];\n            const _second = points[points.length / 2 - 1];\n            edge.midPoint = {\n                x: (_first.x + _second.x) / 2,\n                y: (_first.y + _second.y) / 2\n            };\n        }\n    }\n    basicUpdate() {\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.el.nativeElement;\n        if (hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n}\nGraphComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: LayoutService }], target: i0.ɵɵFactoryTarget.Component });\nGraphComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: GraphComponent, selector: \"ngx-graph\", inputs: { nodes: \"nodes\", clusters: \"clusters\", links: \"links\", activeEntries: \"activeEntries\", curve: \"curve\", draggingEnabled: \"draggingEnabled\", nodeHeight: \"nodeHeight\", nodeMaxHeight: \"nodeMaxHeight\", nodeMinHeight: \"nodeMinHeight\", nodeWidth: \"nodeWidth\", nodeMinWidth: \"nodeMinWidth\", nodeMaxWidth: \"nodeMaxWidth\", panningEnabled: \"panningEnabled\", panningAxis: \"panningAxis\", enableZoom: \"enableZoom\", zoomSpeed: \"zoomSpeed\", minZoomLevel: \"minZoomLevel\", maxZoomLevel: \"maxZoomLevel\", autoZoom: \"autoZoom\", panOnZoom: \"panOnZoom\", animate: \"animate\", autoCenter: \"autoCenter\", update$: \"update$\", center$: \"center$\", zoomToFit$: \"zoomToFit$\", panToNode$: \"panToNode$\", layout: \"layout\", layoutSettings: \"layoutSettings\", enableTrackpadSupport: \"enableTrackpadSupport\", showMiniMap: \"showMiniMap\", miniMapMaxWidth: \"miniMapMaxWidth\", miniMapMaxHeight: \"miniMapMaxHeight\", miniMapPosition: \"miniMapPosition\", view: \"view\", scheme: \"scheme\", customColors: \"customColors\", animations: \"animations\", groupResultsBy: \"groupResultsBy\", zoomLevel: \"zoomLevel\", panOffsetX: \"panOffsetX\", panOffsetY: \"panOffsetY\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", zoomChange: \"zoomChange\", clickHandler: \"clickHandler\" }, host: { listeners: { \"document:mousemove\": \"onMouseMove($event)\", \"document:mousedown\": \"onMouseDown($event)\", \"document:click\": \"graphClick($event)\", \"document:touchmove\": \"onTouchMove($event)\", \"document:mouseup\": \"onMouseUp($event)\" } }, queries: [{ propertyName: \"linkTemplate\", first: true, predicate: [\"linkTemplate\"], descendants: true }, { propertyName: \"nodeTemplate\", first: true, predicate: [\"nodeTemplate\"], descendants: true }, { propertyName: \"clusterTemplate\", first: true, predicate: [\"clusterTemplate\"], descendants: true }, { propertyName: \"defsTemplate\", first: true, predicate: [\"defsTemplate\"], descendants: true }, { propertyName: \"miniMapNodeTemplate\", first: true, predicate: [\"miniMapNodeTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"nodeElements\", predicate: [\"nodeElement\"], descendants: true }, { propertyName: \"linkElements\", predicate: [\"linkElement\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n  class=\\\"ngx-charts-outer\\\"\\n  [style.width.px]=\\\"width\\\"\\n  [@animationState]=\\\"'active'\\\"\\n  [@.disabled]=\\\"!animations\\\"\\n  (mouseWheelUp)=\\\"onZoom($event, 'in')\\\"\\n  (mouseWheelDown)=\\\"onZoom($event, 'out')\\\"\\n  mouseWheel\\n>\\n  <svg:svg class=\\\"ngx-charts\\\" [attr.width]=\\\"width\\\" [attr.height]=\\\"height\\\">\\n    <svg:g\\n      *ngIf=\\\"initialized && graph\\\"\\n      [attr.transform]=\\\"transform\\\"\\n      (touchstart)=\\\"onTouchStart($event)\\\"\\n      (touchend)=\\\"onTouchEnd($event)\\\"\\n      class=\\\"graph chart\\\"\\n    >\\n      <defs>\\n        <ng-container *ngIf=\\\"defsTemplate\\\" [ngTemplateOutlet]=\\\"defsTemplate\\\"></ng-container>\\n        <svg:path\\n          class=\\\"text-path\\\"\\n          *ngFor=\\\"let link of graph.edges\\\"\\n          [attr.d]=\\\"link.textPath\\\"\\n          [attr.id]=\\\"link.id\\\"\\n        ></svg:path>\\n      </defs>\\n\\n      <svg:rect\\n        class=\\\"panning-rect\\\"\\n        [attr.width]=\\\"dims.width * 100\\\"\\n        [attr.height]=\\\"dims.height * 100\\\"\\n        [attr.transform]=\\\"'translate(' + (-dims.width || 0) * 50 + ',' + (-dims.height || 0) * 50 + ')'\\\"\\n        (mousedown)=\\\"isPanning = true\\\"\\n      />\\n\\n      <ng-content></ng-content>\\n\\n      <svg:g class=\\\"clusters\\\">\\n        <svg:g\\n          #clusterElement\\n          *ngFor=\\\"let node of graph.clusters; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldClusters.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"clusterTemplate\\\"\\n            [ngTemplateOutlet]=\\\"clusterTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:g *ngIf=\\\"!clusterTemplate\\\" class=\\\"node cluster\\\">\\n            <svg:rect\\n              [attr.width]=\\\"node.dimension.width\\\"\\n              [attr.height]=\\\"node.dimension.height\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n            <svg:text alignment-baseline=\\\"central\\\" [attr.x]=\\\"10\\\" [attr.y]=\\\"node.dimension.height / 2\\\">\\n              {{ node.label }}\\n            </svg:text>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"links\\\">\\n        <svg:g #linkElement *ngFor=\\\"let link of graph.edges; trackBy: trackLinkBy\\\" class=\\\"link-group\\\" [id]=\\\"link.id\\\">\\n          <ng-container\\n            *ngIf=\\\"linkTemplate\\\"\\n            [ngTemplateOutlet]=\\\"linkTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: link }\\\"\\n          ></ng-container>\\n          <svg:path *ngIf=\\\"!linkTemplate\\\" class=\\\"edge\\\" [attr.d]=\\\"link.line\\\" />\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"nodes\\\">\\n        <svg:g\\n          #nodeElement\\n          *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n          (mousedown)=\\\"onNodeMouseDown($event, node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"nodeTemplate\\\"\\n            [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:circle\\n            *ngIf=\\\"!nodeTemplate\\\"\\n            r=\\\"10\\\"\\n            [attr.cx]=\\\"node.dimension.width / 2\\\"\\n            [attr.cy]=\\\"node.dimension.height / 2\\\"\\n            [attr.fill]=\\\"node.data?.color\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:clipPath [attr.id]=\\\"minimapClipPathId\\\">\\n      <svg:rect\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n      ></svg:rect>\\n    </svg:clipPath>\\n\\n    <svg:g\\n      class=\\\"minimap\\\"\\n      *ngIf=\\\"showMiniMap\\\"\\n      [attr.transform]=\\\"minimapTransform\\\"\\n      [attr.clip-path]=\\\"'url(#' + minimapClipPathId + ')'\\\"\\n    >\\n      <svg:rect\\n        class=\\\"minimap-background\\\"\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n        (mousedown)=\\\"onMinimapPanTo($event)\\\"\\n      ></svg:rect>\\n\\n      <svg:g\\n        [style.transform]=\\\"\\n          'translate(' +\\n          -minimapOffsetX / minimapScaleCoefficient +\\n          'px,' +\\n          -minimapOffsetY / minimapScaleCoefficient +\\n          'px)'\\n        \\\"\\n      >\\n        <svg:g class=\\\"minimap-nodes\\\" [style.transform]=\\\"'scale(' + 1 / minimapScaleCoefficient + ')'\\\">\\n          <svg:g\\n            #nodeElement\\n            *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n            class=\\\"node-group\\\"\\n            [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n            [id]=\\\"node.id\\\"\\n            [attr.transform]=\\\"node.transform\\\"\\n          >\\n            <ng-container\\n              *ngIf=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <ng-container\\n              *ngIf=\\\"!miniMapNodeTemplate && nodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <svg:circle\\n              *ngIf=\\\"!nodeTemplate && !miniMapNodeTemplate\\\"\\n              r=\\\"10\\\"\\n              [attr.cx]=\\\"node.dimension.width / 2 / minimapScaleCoefficient\\\"\\n              [attr.cy]=\\\"node.dimension.height / 2 / minimapScaleCoefficient\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n\\n        <svg:rect\\n          [attr.transform]=\\\"\\n            'translate(' +\\n            panOffsetX / zoomLevel / -minimapScaleCoefficient +\\n            ',' +\\n            panOffsetY / zoomLevel / -minimapScaleCoefficient +\\n            ')'\\n          \\\"\\n          class=\\\"minimap-drag\\\"\\n          [class.panning]=\\\"isMinimapPanning\\\"\\n          [attr.width]=\\\"width / minimapScaleCoefficient / zoomLevel\\\"\\n          [attr.height]=\\\"height / minimapScaleCoefficient / zoomLevel\\\"\\n          (mousedown)=\\\"onMinimapDragMouseDown()\\\"\\n        ></svg:rect>\\n      </svg:g>\\n    </svg:g>\\n  </svg:svg>\\n</div>\\n\", styles: [\".minimap .minimap-background{fill:#0000001a}.minimap .minimap-drag{fill:#0003;stroke:#fff;stroke-width:1px;stroke-dasharray:2px;stroke-dashoffset:2px;cursor:pointer}.minimap .minimap-drag.panning{fill:#0000004d}.minimap .minimap-nodes{opacity:.5;pointer-events:none}.graph{-webkit-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:#0000;cursor:move}.graph .node-group.old-node{transition:transform .5s ease-in-out}.graph .node-group .node:focus{outline:none}.graph .cluster rect{opacity:.2}\\n\"], directives: [{ type: MouseWheelDirective, selector: \"[mouseWheel]\", outputs: [\"mouseWheelUp\", \"mouseWheelDown\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(500)\n], GraphComponent.prototype, \"updateMinimap\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-graph', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n                        ])\n                    ], template: \"<div\\n  class=\\\"ngx-charts-outer\\\"\\n  [style.width.px]=\\\"width\\\"\\n  [@animationState]=\\\"'active'\\\"\\n  [@.disabled]=\\\"!animations\\\"\\n  (mouseWheelUp)=\\\"onZoom($event, 'in')\\\"\\n  (mouseWheelDown)=\\\"onZoom($event, 'out')\\\"\\n  mouseWheel\\n>\\n  <svg:svg class=\\\"ngx-charts\\\" [attr.width]=\\\"width\\\" [attr.height]=\\\"height\\\">\\n    <svg:g\\n      *ngIf=\\\"initialized && graph\\\"\\n      [attr.transform]=\\\"transform\\\"\\n      (touchstart)=\\\"onTouchStart($event)\\\"\\n      (touchend)=\\\"onTouchEnd($event)\\\"\\n      class=\\\"graph chart\\\"\\n    >\\n      <defs>\\n        <ng-container *ngIf=\\\"defsTemplate\\\" [ngTemplateOutlet]=\\\"defsTemplate\\\"></ng-container>\\n        <svg:path\\n          class=\\\"text-path\\\"\\n          *ngFor=\\\"let link of graph.edges\\\"\\n          [attr.d]=\\\"link.textPath\\\"\\n          [attr.id]=\\\"link.id\\\"\\n        ></svg:path>\\n      </defs>\\n\\n      <svg:rect\\n        class=\\\"panning-rect\\\"\\n        [attr.width]=\\\"dims.width * 100\\\"\\n        [attr.height]=\\\"dims.height * 100\\\"\\n        [attr.transform]=\\\"'translate(' + (-dims.width || 0) * 50 + ',' + (-dims.height || 0) * 50 + ')'\\\"\\n        (mousedown)=\\\"isPanning = true\\\"\\n      />\\n\\n      <ng-content></ng-content>\\n\\n      <svg:g class=\\\"clusters\\\">\\n        <svg:g\\n          #clusterElement\\n          *ngFor=\\\"let node of graph.clusters; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldClusters.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"clusterTemplate\\\"\\n            [ngTemplateOutlet]=\\\"clusterTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:g *ngIf=\\\"!clusterTemplate\\\" class=\\\"node cluster\\\">\\n            <svg:rect\\n              [attr.width]=\\\"node.dimension.width\\\"\\n              [attr.height]=\\\"node.dimension.height\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n            <svg:text alignment-baseline=\\\"central\\\" [attr.x]=\\\"10\\\" [attr.y]=\\\"node.dimension.height / 2\\\">\\n              {{ node.label }}\\n            </svg:text>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"links\\\">\\n        <svg:g #linkElement *ngFor=\\\"let link of graph.edges; trackBy: trackLinkBy\\\" class=\\\"link-group\\\" [id]=\\\"link.id\\\">\\n          <ng-container\\n            *ngIf=\\\"linkTemplate\\\"\\n            [ngTemplateOutlet]=\\\"linkTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: link }\\\"\\n          ></ng-container>\\n          <svg:path *ngIf=\\\"!linkTemplate\\\" class=\\\"edge\\\" [attr.d]=\\\"link.line\\\" />\\n        </svg:g>\\n      </svg:g>\\n\\n      <svg:g class=\\\"nodes\\\">\\n        <svg:g\\n          #nodeElement\\n          *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n          class=\\\"node-group\\\"\\n          [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n          [id]=\\\"node.id\\\"\\n          [attr.transform]=\\\"node.transform\\\"\\n          (click)=\\\"onClick(node)\\\"\\n          (mousedown)=\\\"onNodeMouseDown($event, node)\\\"\\n        >\\n          <ng-container\\n            *ngIf=\\\"nodeTemplate\\\"\\n            [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n            [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n          ></ng-container>\\n          <svg:circle\\n            *ngIf=\\\"!nodeTemplate\\\"\\n            r=\\\"10\\\"\\n            [attr.cx]=\\\"node.dimension.width / 2\\\"\\n            [attr.cy]=\\\"node.dimension.height / 2\\\"\\n            [attr.fill]=\\\"node.data?.color\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:clipPath [attr.id]=\\\"minimapClipPathId\\\">\\n      <svg:rect\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n      ></svg:rect>\\n    </svg:clipPath>\\n\\n    <svg:g\\n      class=\\\"minimap\\\"\\n      *ngIf=\\\"showMiniMap\\\"\\n      [attr.transform]=\\\"minimapTransform\\\"\\n      [attr.clip-path]=\\\"'url(#' + minimapClipPathId + ')'\\\"\\n    >\\n      <svg:rect\\n        class=\\\"minimap-background\\\"\\n        [attr.width]=\\\"graphDims.width / minimapScaleCoefficient\\\"\\n        [attr.height]=\\\"graphDims.height / minimapScaleCoefficient\\\"\\n        (mousedown)=\\\"onMinimapPanTo($event)\\\"\\n      ></svg:rect>\\n\\n      <svg:g\\n        [style.transform]=\\\"\\n          'translate(' +\\n          -minimapOffsetX / minimapScaleCoefficient +\\n          'px,' +\\n          -minimapOffsetY / minimapScaleCoefficient +\\n          'px)'\\n        \\\"\\n      >\\n        <svg:g class=\\\"minimap-nodes\\\" [style.transform]=\\\"'scale(' + 1 / minimapScaleCoefficient + ')'\\\">\\n          <svg:g\\n            #nodeElement\\n            *ngFor=\\\"let node of graph.nodes; trackBy: trackNodeBy\\\"\\n            class=\\\"node-group\\\"\\n            [class.old-node]=\\\"animate && oldNodes.has(node.id)\\\"\\n            [id]=\\\"node.id\\\"\\n            [attr.transform]=\\\"node.transform\\\"\\n          >\\n            <ng-container\\n              *ngIf=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"miniMapNodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <ng-container\\n              *ngIf=\\\"!miniMapNodeTemplate && nodeTemplate\\\"\\n              [ngTemplateOutlet]=\\\"nodeTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\"\\n            ></ng-container>\\n            <svg:circle\\n              *ngIf=\\\"!nodeTemplate && !miniMapNodeTemplate\\\"\\n              r=\\\"10\\\"\\n              [attr.cx]=\\\"node.dimension.width / 2 / minimapScaleCoefficient\\\"\\n              [attr.cy]=\\\"node.dimension.height / 2 / minimapScaleCoefficient\\\"\\n              [attr.fill]=\\\"node.data?.color\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n\\n        <svg:rect\\n          [attr.transform]=\\\"\\n            'translate(' +\\n            panOffsetX / zoomLevel / -minimapScaleCoefficient +\\n            ',' +\\n            panOffsetY / zoomLevel / -minimapScaleCoefficient +\\n            ')'\\n          \\\"\\n          class=\\\"minimap-drag\\\"\\n          [class.panning]=\\\"isMinimapPanning\\\"\\n          [attr.width]=\\\"width / minimapScaleCoefficient / zoomLevel\\\"\\n          [attr.height]=\\\"height / minimapScaleCoefficient / zoomLevel\\\"\\n          (mousedown)=\\\"onMinimapDragMouseDown()\\\"\\n        ></svg:rect>\\n      </svg:g>\\n    </svg:g>\\n  </svg:svg>\\n</div>\\n\", styles: [\".minimap .minimap-background{fill:#0000001a}.minimap .minimap-drag{fill:#0003;stroke:#fff;stroke-width:1px;stroke-dasharray:2px;stroke-dashoffset:2px;cursor:pointer}.minimap .minimap-drag.panning{fill:#0000004d}.minimap .minimap-nodes{opacity:.5;pointer-events:none}.graph{-webkit-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:#0000;cursor:move}.graph .node-group.old-node{transition:transform .5s ease-in-out}.graph .node-group .node:focus{outline:none}.graph .cluster rect{opacity:.2}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: LayoutService }]; }, propDecorators: { nodes: [{\n                type: Input\n            }], clusters: [{\n                type: Input\n            }], links: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], draggingEnabled: [{\n                type: Input\n            }], nodeHeight: [{\n                type: Input\n            }], nodeMaxHeight: [{\n                type: Input\n            }], nodeMinHeight: [{\n                type: Input\n            }], nodeWidth: [{\n                type: Input\n            }], nodeMinWidth: [{\n                type: Input\n            }], nodeMaxWidth: [{\n                type: Input\n            }], panningEnabled: [{\n                type: Input\n            }], panningAxis: [{\n                type: Input\n            }], enableZoom: [{\n                type: Input\n            }], zoomSpeed: [{\n                type: Input\n            }], minZoomLevel: [{\n                type: Input\n            }], maxZoomLevel: [{\n                type: Input\n            }], autoZoom: [{\n                type: Input\n            }], panOnZoom: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], autoCenter: [{\n                type: Input\n            }], update$: [{\n                type: Input\n            }], center$: [{\n                type: Input\n            }], zoomToFit$: [{\n                type: Input\n            }], panToNode$: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], layoutSettings: [{\n                type: Input\n            }], enableTrackpadSupport: [{\n                type: Input\n            }], showMiniMap: [{\n                type: Input\n            }], miniMapMaxWidth: [{\n                type: Input\n            }], miniMapMaxHeight: [{\n                type: Input\n            }], miniMapPosition: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], zoomChange: [{\n                type: Output\n            }], clickHandler: [{\n                type: Output\n            }], linkTemplate: [{\n                type: ContentChild,\n                args: ['linkTemplate']\n            }], nodeTemplate: [{\n                type: ContentChild,\n                args: ['nodeTemplate']\n            }], clusterTemplate: [{\n                type: ContentChild,\n                args: ['clusterTemplate']\n            }], defsTemplate: [{\n                type: ContentChild,\n                args: ['defsTemplate']\n            }], miniMapNodeTemplate: [{\n                type: ContentChild,\n                args: ['miniMapNodeTemplate']\n            }], nodeElements: [{\n                type: ViewChildren,\n                args: ['nodeElement']\n            }], linkElements: [{\n                type: ViewChildren,\n                args: ['linkElement']\n            }], groupResultsBy: [{\n                type: Input\n            }], zoomLevel: [{\n                type: Input,\n                args: ['zoomLevel']\n            }], panOffsetX: [{\n                type: Input,\n                args: ['panOffsetX']\n            }], panOffsetY: [{\n                type: Input,\n                args: ['panOffsetY']\n            }], updateMinimap: [], onMouseMove: [{\n                type: HostListener,\n                args: ['document:mousemove', ['$event']]\n            }], onMouseDown: [{\n                type: HostListener,\n                args: ['document:mousedown', ['$event']]\n            }], graphClick: [{\n                type: HostListener,\n                args: ['document:click', ['$event']]\n            }], onTouchMove: [{\n                type: HostListener,\n                args: ['document:touchmove', ['$event']]\n            }], onMouseUp: [{\n                type: HostListener,\n                args: ['document:mouseup', ['$event']]\n            }] } });\n\nclass GraphModule {\n}\nGraphModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGraphModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphModule, declarations: [GraphComponent, MouseWheelDirective, VisibilityObserver], imports: [CommonModule], exports: [GraphComponent, MouseWheelDirective] });\nGraphModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphModule, providers: [LayoutService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: GraphModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [GraphComponent, MouseWheelDirective, VisibilityObserver],\n                    exports: [GraphComponent, MouseWheelDirective],\n                    providers: [LayoutService]\n                }]\n        }] });\n\nclass NgxGraphModule {\n}\nNgxGraphModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxGraphModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxGraphModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxGraphModule, imports: [CommonModule], exports: [GraphModule] });\nNgxGraphModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxGraphModule, imports: [[CommonModule], GraphModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxGraphModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [GraphModule]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-graph\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Alignment, ColaForceDirectedLayout, D3ForceDirectedLayout, DagreClusterLayout, DagreLayout, DagreNodesOnlyLayout, GraphComponent, GraphModule, MiniMapPosition, MouseWheelDirective, NgxGraphModule, Orientation, PanningAxis, toD3Node, toNode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}